DTS测试用例开发规范
================================================================================
1. 过程内简单变量
--------------------------------------------------------------------------------
1.1 在顺序路径上出现问题
int foo_1_1(int a) {
	10 % a;
	return 0;
}
--------------------------------------------------------------------------------
1.2 在简单条件路径上出现问题
int foo_1_2(int a) {
	if (a == 0) {
		10 % a;
	}
	return 0;
}
--------------------------------------------------------------------------------
1.3 在复合条件路径上出现问题
int foo_1_3(int a, int i) {
	if (i == 1 && a == 0) {
		10 % a;
	}
	return 0;
}
--------------------------------------------------------------------------------
1.4 在组合条件路径上出现问题
int foo_1_4(int i, int j) {
	int a;
	if (i)
		a = 0;
	if (j)
		10 % a;
	return 0;
}
--------------------------------------------------------------------------------
1.5 在简单条件判断后出现问题
int foo_1_5(int a) {
	if (a == 0) {}
	10 % a;
	return 0;
}
--------------------------------------------------------------------------------
1.6 在复合条件判断后出现问题
int foo_1_6(int a, int i) {
	if (i == 1 && a == 0) {}
	10 % a;
	return 0;
}
--------------------------------------------------------------------------------
1.7 在简单条件判断前出现问题
int foo_1_7(int a, int i) {
	10 % a;
	if (i) {}
	return 0;
}
--------------------------------------------------------------------------------
1.8 在复合条件判断前出现问题
int foo_1_8(int a, int i) {
	10 % a;
	if (i == 1 && a == 0) {}
	return 0;
}
--------------------------------------------------------------------------------
1.9 在单级函数副作用后出现问题
int a;
void setZero_1_9() {
	a = 0;
}
int ff_1_9() {
	setZero_1_9();
	10 % a;
	return 0;
}
--------------------------------------------------------------------------------
1.10 在多级函数副作用后出现问题
int a;
void setZero_1_10() {
	a = 0;
}
void foo_1_10() {
	setZero_1_10();
}
int ff_1_10() {
	//setZero_1_10(&a);
	foo_1_10();
	10 % a;
	return 0;
}
--------------------------------------------------------------------------------
1.11 在简单条件上出现问题
int foo_1_11(int a) {
	if (10 % a == 0) {}
	return 0;
}
--------------------------------------------------------------------------------
1.12 在复合条件上出现问题
int foo_1_12(int a, int i) {
	if (i == 1 && 10 % a == 0) {}
	return 0;
}
================================================================================
2. 过程内结构体成员变量
--------------------------------------------------------------------------------
2.1 在顺序路径上出现问题
struct A_2_1 {
	int a;
};
int foo_2_1() {
	struct A_2_1 a;
	a.a = 0;
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
2.2 在简单条件路径上出现问题
struct A_2_2 {
	int a;
};
int foo_2_2(struct A_2_2 a) {
	if (a.a == 0)
		10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
2.3 在复合条件路径上出现问题
struct A_2_3 {
	int p;
};
int foo_2_3(struct A_2_3 a, int i) {
	if (i || a.p == 0)
		10 % a.p;
	return 0;
}
--------------------------------------------------------------------------------
2.4 在组合条件路径上出现问题
struct A_2_4 {
	int a;
};
int foo_2_4(struct A_2_4 a, int i, int j) {
	if (i)
		a.a=0;
	if(j)
		10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
2.5 在简单条件判断后出现问题
struct A_2_5 {
	int a;
};
int foo_2_5(struct A_2_5 a) {
	if (a.a == 0) {}
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
2.6 在复合条件判断后出现问题
struct A_2_6 {
	int a;
};
int foo_2_6(struct A_2_6 a, int i) {
	if (i || a.a == 0) {}
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
2.7 在简单条件判断前出现问题
struct A_2_7 {
	int a;
};
int foo_2_7(struct A_2_7 a) {
	10 % a.a;
	if (a.a == 0) {}
	return 0;
}
--------------------------------------------------------------------------------
2.8 在复合条件判断前出现问题
struct A_2_8 {
	int a;
};
int foo_2_8(struct A_2_8 a, int i) {
	10 % a.a;
	if (i || a.a == 0) {}
	return 0;
}
--------------------------------------------------------------------------------
2.9 在单级函数副作用后出现问题
struct A_2_9 {
	int a;
};
struct A_2_9 a;
void setZero_2_9() {
	a.a = 0;
}
int ff_2_9() {
	a.a = 1;
	setZero_2_9();
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
2.10 在多级函数副作用后出现问题
struct A_2_10 {
	int a;
};
struct A_2_10 a;
void setZero_2_10() {
	a.a = 0;
}
void foo_2_10() {
	setZero_2_10();
}
int ff_2_10() {
	a.a = 1;
	//setZero_2_10(&a);
	foo_2_10();
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
2.11 在简单条件上出现问题
struct A_2_11 {
	int a;
};
int foo_2_11() {
	struct A_2_11 a;
	a.a = 0;
	if (10 % a.a == 0) {
		// do something
	}
	return 0;
}
--------------------------------------------------------------------------------
2.12 在复合条件上出现问题
struct A_2_12 {
	int a;
};
int foo_2_12(int i) {
	struct A_2_12 a;
	a.a = 0;
	if (i == 1 && 10 % a.a == 0) {
		// do something
	}
	return 0;
}
================================================================================
3. 过程内类成员变量
--------------------------------------------------------------------------------
3.1 在顺序路径上出现问题
class A_3_1 {
public:
	int a;
};
int foo_3_1() {
	A_3_1 a;
	a.a = 0;
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.2 在简单条件路径上出现问题
class A_3_2 {
public:
	int a;
};
int foo_3_2(A_3_2 a) {
	if (a.a == 0)
		10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.3 在复合条件路径上出现问题
class A_3_3 {
public:
	int a;
};
int foo_3_3(A_3_3 a, int i) {
	if (i || a.a == 0)
		10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.4 在组合条件路径上出现问题
class A_3_4 {
public:
	int a;
};
int foo_3_4(A_3_4 a, int i, int j) {
	if (i)
		a.a=0;
	if(j)
		10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.5 在简单条件判断后出现问题
class A_3_5 {
public:
	int a;
};
int foo_3_5(A_3_5 a) {
	if (a.a == 0) {}
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.6 在复合条件判断后出现问题
class A_3_6 {
public:
	int a;
};
int foo_3_6(A_3_6 a, int i) {
	if (i || a.a == 0) ;
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.7 在简单条件判断前出现问题
class A_3_7 {
public:
	int a;
};
int foo_3_7(A_3_7 a) {
	10 % a.a;
	if (a.a == 0) ;
	return 0;
}
--------------------------------------------------------------------------------
3.8 在复合条件判断前出现问题
class A_3_8 {
public:
	int a;
};
int foo_3_8(A_3_8 a, int i) {
	10 % a.a;
	if (i || a.a == 0) ;
	return 0;
}
--------------------------------------------------------------------------------
3.9 在单级函数副作用后出现问题
class A_3_9 {
public:
	int a;
};
A_3_9 a;
void setZero_3_9() {
	a.a = 0;
}
int ff_3_9() {
	a.a = 1;
	setZero_3_9();
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.10 在多级函数副作用后出现问题
class A_3_10 {
public:
	int a;
};
A_3_10 a;
void setZero_3_10() {
	a.a = 0;
}
void foo_3_10() {
	setZero_3_10();
}
int ff_3_10() {
	a.a = 1;
	//setZero_3_10(&a);
	foo_3_10();
	10 % a.a;
	return 0;
}
--------------------------------------------------------------------------------
3.11 在简单条件上出现问题
class A_3_11 {
public:
	int a;
};
int foo_3_11() {
	A_3_11 a;
	a.a = 0;
	if (10 % a.a == 0) {}
	return 0;
}
--------------------------------------------------------------------------------
3.12 在复合条件上出现问题
class A_3_12 {
public:
	int a;
};
int foo_3_12(int i) {
	A_3_12 a;
	a.a = 0;
	if (i == 1 && 10 % a.a == 0) {}
	return 0;
}
================================================================================
4. 过程内数组成员变量
--------------------------------------------------------------------------------
4.1 在顺序路径上出现问题
int foo_4_1() {
	int p[10] = {0};
	10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.2 在简单条件路径上出现问题
int foo_4_2(int p[10]) {
	if (p[0] == 0)
		10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.3 在复合条件路径上出现问题
int foo_4_3(int p[10], int i) {
	if (i || p[0] == 0)
		10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.4 在组合条件路径上出现问题
int foo_4_4(int i, int j) {
	int p[10];
	if (i)
		p[0] = 0;
	if(j)
		10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.5 在简单条件判断后出现问题
int foo_4_5(int p[10]) {
	if (p[0] == 0) ;
	10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.6 在复合条件判断后出现问题
int foo_4_6(int p[10], int i) {
	if (i || p[0] == 0) ;
	10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.7 在简单条件判断前出现问题
int foo_4_7(int p[10], int i) {
	10 % p[0];
	if (p[0] == 0) ;
	return 0;
}
--------------------------------------------------------------------------------
4.8 在复合条件判断前出现问题
int foo_4_8(int p[10], int i) {
	10 % p[0];
	if (i || p[0] == 0) ;
	return 0;
}
--------------------------------------------------------------------------------
4.9 在单级函数副作用后出现问题
int p[10];
void setNull_4_9() {
	p[0] = 0;
}
int foo_4_9() {
	setNull_4_9();
	10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.10 在多级函数副作用后出现问题
int p[10];
void setNull_4_10() {
	p[0] = 0;
}
void callSetNull_4_10() {
	setNull_4_10();
}
int foo_4_10() {
	callSetNull_4_10 ();
	10 % p[0];
	return 0;
}
--------------------------------------------------------------------------------
4.11 在简单条件上出现问题
int foo_4_11() {
	int p[10] = {0};
	if (10 % p[0] == 0) {
		// do something
	}
	return 0;
}
--------------------------------------------------------------------------------
4.12 在复合条件上出现问题
int foo_4_12(int i) {
	int p[10] = {0};
	if (i == 1 && 10 % p[0] == 0) {
		// do something
	}
	return 0;
}
================================================================================
5. 过程内临时变量
--------------------------------------------------------------------------------
5.1 在顺序路径上出现问题
int foo_5_1() {
	return 0;
}
int ff_5_1() {
	10 % foo_5_1();
	return 0;
}
--------------------------------------------------------------------------------
5.2 在简单条件路径上出现问题
int foo_5_2() {
	return 0;
}
int bar_5_2() {
	if (foo_5_2())
		10 % foo_5_2();
	return 0;
}
--------------------------------------------------------------------------------
5.3 在复合条件路径上出现问题
int foo_5_3() {
	return 0;
}
int ff_5_3(int i) {
	if (i && foo_5_3())
		10 % foo_5_3();
	return 0;
}
--------------------------------------------------------------------------------
5.4 在组合条件路径上出现问题
int foo_5_4() {
	return 0;
}
int ff_5_4(int i, int j) {
	if (i)
		foo_5_4();
	if (j)
		10 % foo_5_4();
	return 0;
}
--------------------------------------------------------------------------------
5.5 在简单条件判断后出现问题
int foo_5_5() {
	return 0;
}
int ff_5_5() {
	if (foo_5_5()) {
		// do something
	}
	10 % foo_5_5();
	return 0;
}
--------------------------------------------------------------------------------
5.6 在复合条件判断后出现问题
int foo_5_6() {
return 0;
}
int ff_5_6(int i) {
if (foo_5_6() && i) {
    // do something
}
10 % foo_5_6();
return 0;
}
--------------------------------------------------------------------------------
5.7 在简单条件判断前出现问题
int foo_5_7() {
	return 0;
}
int ff_5_7(int i) {
	10 % foo_5_7();
	if (i) {
		// do something
	}
	return 0;
}
--------------------------------------------------------------------------------
5.8 在复合条件判断前出现问题
int foo_5_8() {
	return 0;
}
int ff_5_8(int i) {
	10 % foo_5_8();
	if (i && foo_5_8()) {
		// do something
	}
	return 0;
}
--------------------------------------------------------------------------------
5.9 在简单条件上出现问题
int foo_5_9() {
	return 0;
}
int ff_5_9() {
	if (10 % foo_5_9() == 0) {
		// do something
	}
	return 0;
}
--------------------------------------------------------------------------------
5.10 在复合条件上出现问题
int foo_5_10() {
	return 0;
}
int ff_5_10(int i) {
	if (i && 10 % foo_5_10() == 0) {
		// do something
	}
	return 0;
}
================================================================================
6. 过程间单级约束
--------------------------------------------------------------------------------
6.1 约束参数变量
void foo_6_1(int a) {
	10 % a;
}
int ff_6_1() {
	int p = 0;
	foo_6_1(p);
	return 0;
}
--------------------------------------------------------------------------------
6.2 约束简单全局变量
int a;
void foo_6_2() {
	10 % a;
}
int ff_6_2() {
	a = 0;
	foo_6_2();
	return 0;
}
--------------------------------------------------------------------------------
6.3 约束结构成员全局变量
struct A_6_3 {
	int a;
};
struct A_6_3 a;
void foo_6_3() {
	10 % a.a;
}
int ff_6_3() {
	a.a = 0;
	foo_6_3();
	return 0;
}
--------------------------------------------------------------------------------
6.4 约束类成员全局变量
class A_6_4 {
public:
	int a;
};
A_6_4 a;
void foo_6_4() {
	10 % a.a;
}
int ff_6_4() {
	a.a = 0;
	foo_6_4();
	return 0;
}
--------------------------------------------------------------------------------
6.5 约束数组成员全局变量
int p[10];
void foo_6_5() {
	10 % p[0];
}
int ff_6_5() {
	p[0] = 0;
	foo_6_5();
	return 0;
}
================================================================================
7. 过程间多级约束
--------------------------------------------------------------------------------
7.1 约束参数变量
void foo_7_1(int p) {
	10 % p;
}
void bar_7_1(int p) {
	foo_7_1(p);
}
int ff_7_1() {
	int p = 0;
	//foo_7_1(p);
	bar_7_1(p);
	return 0;
}
--------------------------------------------------------------------------------
7.2 约束简单全局变量
int p;
void foo_7_2() {
	10 % p;
}
void bar_7_2() {
	foo_7_2();
}
int ff_7_2() {
	p = 0;
	bar_7_2();
	//foo_7_2();
	return 0;
}
--------------------------------------------------------------------------------
7.3 约束结构成员全局变量
struct A_7_3 {
	int p;
};
struct A_7_3 a;
void foo_7_3() {
	10 % a.p;
}
void bar_7_3() {
	foo_7_3();
}
int ff_7_3() {
	a.p = 0;
	bar_7_3();
	//foo_7_3();
	return 0;
}
--------------------------------------------------------------------------------
7.4 约束类成员全局变量
class A_7_4 {
public:
	int p;
};
A_7_4 a;
void foo_7_4() {
	10 % a.p;
}
void bar_7_4() {
	foo_7_4();
}
int ff_7_4() {
	a.p = 0;
	bar_7_4();
	//foo_7_4();
	return 0;
}
--------------------------------------------------------------------------------
7.5 约束数组成员全局变量
int p[10];
void foo_7_5() {
	10 % p[0];
}
void bar_7_5() {
	foo_7_5();
}
int ff_7_5() {
	p[0] = 0;
	bar_7_5();
	//foo_7_5();
	return 0;
}
================================================================================
8. 过程间缺陷对象
--------------------------------------------------------------------------------
8.1 参数变量
void foo_8_1(int a) {
}
void bar_8_1(int a) {
	a = 0;
	foo_8_1(10 % a);
}
--------------------------------------------------------------------------------
8.2 简单全局变量
int a;
void foo_8_2(int a) {
}
void bar_8_2() {
	a = 0;
	foo_8_2(10 % a);
}
--------------------------------------------------------------------------------
8.3 结构成员全局变量
struct A_8_3 {
	int a;
};
struct A_8_3 a;
void foo_8_3(int a) {
}
void bar_8_3() {
	a.a = 0;
	foo_8_3(10 % a.a);
}
--------------------------------------------------------------------------------
8.4 类成员全局变量
class A_8_4 {
public:
	int a;
};
A_8_4 a;
void foo_8_4(int a) {
}
void bar_8_4() {
	a.a = 0;
	foo_8_4(10 % a.a);
}
--------------------------------------------------------------------------------
8.5 数组成员全局变量
int a[10];
void foo_8_5(int p) {
}
void bar_8_5() {
	a[0] = 0;
	foo_8_5(10 % a[0]);
}
--------------------------------------------------------------------------------
8.6 库函数临时变量
#include <stdlib.h>
#include <time.h>
void foo_8_6(int a) {
}
void bar_8_6() {
	srand(time(0));
	foo_8_6(10 % rand());
}
--------------------------------------------------------------------------------
8.7 自定义函数临时变量
void foo_8_7(int a) {
}
int genint_8_7() {
	return 0;
}
void bar_8_7() {
	foo_8_7(10 % genint_8_7());
}
================================================================================
