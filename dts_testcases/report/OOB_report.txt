DTS测试用例开发规范
================================================================================
1. 过程内简单变量
--------------------------------------------------------------------------------
1.1 在顺序路径上出现问题
#include <stdlib.h>

// Array
int foo_1_1() {
	char p[5] = {0};
	p[5] = 'a';
	return 0;
}

// Memory
int bar_1_1() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	p[5] = 'a';
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_1() {
	char p[5] = {0};
	p[5] = 'a';
	return 0;
}

// Memory
int bar_1_1() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	p[5] = 'a';
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.2 在简单条件路径上出现问题
#include <stdlib.h>

// Array
int foo_1_2() {
	char p[5] = {0};
	if (!p[5])
		p[5] = 'a';
	return 0;
}

// Memory
int bar_1_2() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (!p)
		p[5] = 'a';
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_2() {
	char p[5] = {0};
	if (!p[5])
		p[5] = 'a';
	return 0;
}

// Memory
int bar_1_2() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (!p)
		p[5] = 'a';
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.3 在复合条件路径上出现问题
#include <stdlib.h>

// Array
int foo_1_3(int i) {
	char p[5] = {0};
	if (!p[5] || i)
		p[5] = 'a';
	return 0;
}

// Memory
int bar_1_3(int i) {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (i || !p)
		p[5] = 'a';
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_3(int i) {
	char p[5] = {0};
	if (!p[5] || i)
		p[5] = 'a';
	return 0;
}

// Memory
int bar_1_3(int i) {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (i || !p)
		p[5] = 'a';
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.4 在组合条件路径上出现问题
#include <stdlib.h>

// Memory
int bar_1_4(int i) {
	int *p;
	p = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(p);
		p = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		p[5] = 'a';
	free(p);
	return 0;
}

#include <stdlib.h>

// Memory
int bar_1_4(int i) {
	int *p;
	p = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(p);
		p = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		p[5] = 'a';
	free(p);
	return 0;
}

--------------------------------------------------------------------------------
1.5 在简单条件判断后出现问题
#include <stdlib.h>

// Array
int foo_1_5() {
	char p[5] = {0};
	if (!p[5]) {}
	p[5] = 'a';
	return 0;
}

// Memory
int bar_1_5() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (!p) {}
	p[5] = 'a';
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_5() {
	char p[5] = {0};
	if (!p[5]) {}
	p[5] = 'a';
	return 0;
}

// Memory
int bar_1_5() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (!p) {}
	p[5] = 'a';
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.6 在复合条件判断后出现问题
#include <stdlib.h>

// Array
int foo_1_6(int i) {
	char p[5] = {0};
	if (!p[5] || i) {}
	p[5] = 'a';
	return 0;
}

// Memory
int bar_1_6() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (!p || i) {}
	p[5] = 'a';
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_6(int i) {
	char p[5] = {0};
	if (!p[5] || i) {}
	p[5] = 'a';
	return 0;
}

// Memory
int bar_1_6() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (!p || i) {}
	p[5] = 'a';
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.7 在简单条件判断前出现问题
#include <stdlib.h>

// Array
int foo_1_7() {
	char p[5] = {0};
	p[5] = 'a';
	if (!p[5]) {}
	return 0;
}

// Memory
int bar_1_7() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	p[5] = 'a';
	if (!p) {}
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_7() {
	char p[5] = {0};
	p[5] = 'a';
	if (!p[5]) {}
	return 0;
}

// Memory
int bar_1_7() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	p[5] = 'a';
	if (!p) {}
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.8 在复合条件判断前出现问题
#include <stdlib.h>

// Array
int foo_1_8(int i) {
	char p[5] = {0};
	p[5] = 'a';
	if (!p[5] || i) {}
	return 0;
}

// Memory
int bar_1_8() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	p[5] = 'a';
	if (!p || i) {}
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_8(int i) {
	char p[5] = {0};
	p[5] = 'a';
	if (!p[5] || i) {}
	return 0;
}

// Memory
int bar_1_8() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	p[5] = 'a';
	if (!p || i) {}
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.9 在单级函数副作用后出现问题
#include <stdlib.h>

int *p;
void alloc_1_9() {
	p = (int *)malloc(sizeof(int) * 5);
}

int foo_1_9() {
	alloc_1_9();
	p[5] = 'a';
	free(p);
	return 0;
}
#include <stdlib.h>

int *p;
void alloc_1_9() {
	p = (int *)malloc(sizeof(int) * 5);
}

int foo_1_9() {
	alloc_1_9();
	p[5] = 'a';
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.10 在多级函数副作用后出现问题
#include <stdlib.h>
int *p;
void alloc_1_10() {
	p = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_1_10() {
	alloc_1_10();
}
int foo_1_10() {
	callAlloc_1_10();
	p[5] = 'a';
	free(p);
	return 0;
}
#include <stdlib.h>
int *p;
void alloc_1_10() {
	p = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_1_10() {
	alloc_1_10();
}
int foo_1_10() {
	callAlloc_1_10();
	p[5] = 'a';
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.11 在简单条件上出现问题
#include <stdlib.h>

// Array
int foo_1_11() {
	char p[5];
	if (p[5] != 'a') {}
	return 0;
}

// Memory
int bar_1_11() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (p[5] != 'a') {}
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_11() {
	char p[5];
	if (p[5] != 'a') {}
	return 0;
}

// Memory
int bar_1_11() {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (p[5] != 'a') {}
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
1.12 在复合条件上出现问题
#include <stdlib.h>

// Array
int foo_1_12(int i) {
	char p[5];
	if (p[5] != 'a') {}
	return 0;
}

// Memory
int bar_1_12(int i) {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (p[5] != 'a') {}
	free(p);
	return 0;
}
#include <stdlib.h>

// Array
int foo_1_12(int i) {
	char p[5];
	if (p[5] != 'a') {}
	return 0;
}

// Memory
int bar_1_12(int i) {
	int *p;
	p = (int *)malloc(sizeof(int) * 5);
	if (p[5] != 'a') {}
	free(p);
	return 0;
}
================================================================================
2. 过程内结构体成员变量
--------------------------------------------------------------------------------
2.1 在顺序路径上出现问题
#include <stdlib.h>
struct A_2_1 {
	char *a;
	char b[5];
};

// Array
int foo_2_1() {
	struct A_2_1 a;
	a.b[5] = 'a';
	return 0;
}
// Memory
int bar_2_1() {
	struct A_2_1 a;
	a.a = 0;
	a.a = (char *)malloc(sizeof(char) * 5);
	a.a[5] = 'a';
	free(a.a);
	return 0;
}
#include <stdlib.h>
struct A_2_1 {
	char *a;
	char b[5];
};

// Array
int foo_2_1() {
	struct A_2_1 a;
	a.b[5] = 'a';
	return 0;
}
// Memory
int bar_2_1() {
	struct A_2_1 a;
	a.a = 0;
	a.a = (char *)malloc(sizeof(char) * 5);
	a.a[5] = 'a';
	free(a.a);
	return 0;
}
--------------------------------------------------------------------------------
2.2 在简单条件路径上出现问题
#include <stdlib.h>
struct A_2_2 {
	int *p;
	char b[5];
};
struct A_2_2 a;
// Array
int foo_2_2() {
	if (!a.b[5])
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_2() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_2 {
	int *p;
	char b[5];
};
struct A_2_2 a;
// Array
int foo_2_2() {
	if (!a.b[5])
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_2() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.3 在复合条件路径上出现问题
#include <stdlib.h>
struct A_2_3 {
	int *p;
	char b[5];
};
struct A_2_3 a;
// Array
int foo_2_3(int i) {
	if (!a.b[5] || i)
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_3(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || !a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_3 {
	int *p;
	char b[5];
};
struct A_2_3 a;
// Array
int foo_2_3(int i) {
	if (!a.b[5] || i)
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_3(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || !a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.4 在组合条件路径上出现问题
#include <stdlib.h>
struct A_2_4 {
	char *p;
};
struct A_2_4 a;

// Memory
int bar_2_4(int i) {
	a.p = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(a.p);
		a.p = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_4 {
	char *p;
};
struct A_2_4 a;

// Memory
int bar_2_4(int i) {
	a.p = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(a.p);
		a.p = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.5 在简单条件判断后出现问题
#include <stdlib.h>
struct A_2_5 {
	int *p;
	char b[5];
};
struct A_2_5 a;
// Array
int foo_2_5() {
	if (!a.b[5]) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_5() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_5 {
	int *p;
	char b[5];
};
struct A_2_5 a;
// Array
int foo_2_5() {
	if (!a.b[5]) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_5() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.6 在复合条件判断后出现问题
#include <stdlib.h>
struct A_2_6 {
	int *p;
	char b[5];
};
struct A_2_6 a;
// Array
int foo_2_6(int i) {
	if (!a.b[5] || i) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_6(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p || i) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_6 {
	int *p;
	char b[5];
};
struct A_2_6 a;
// Array
int foo_2_6(int i) {
	if (!a.b[5] || i) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_2_6(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p || i) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.7 在简单条件判断前出现问题
#include <stdlib.h>
struct A_2_7 {
	int *p;
	char b[5];
};
struct A_2_7 a;
// Array
int foo_2_7() {
	a.b[5] = 'a';
	if (!a.b[5]) {}
	return 0;
}

// Memory
int bar_2_7() {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p) {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_7 {
	int *p;
	char b[5];
};
struct A_2_7 a;
// Array
int foo_2_7() {
	a.b[5] = 'a';
	if (!a.b[5]) {}
	return 0;
}

// Memory
int bar_2_7() {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p) {}
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.8 在复合条件判断前出现问题
#include <stdlib.h>
struct A_2_8 {
	int *p;
	char b[5];
};
struct A_2_8 a;
// Array
int foo_2_8(int i) {
	a.b[5] = 'a';
	if (!a.b[5] || i) {}
	return 0;
}

// Memory
int bar_2_8(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p || i) {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_8 {
	int *p;
	char b[5];
};
struct A_2_8 a;
// Array
int foo_2_8(int i) {
	a.b[5] = 'a';
	if (!a.b[5] || i) {}
	return 0;
}

// Memory
int bar_2_8(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p || i) {}
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.9 在单级函数副作用后出现问题
#include <stdlib.h>
struct A_2_9 {
	char *p;
};
struct A_2_9 a;

void alloc_2_9() {
	a.p = (int *)malloc(sizeof(int) * 5);
}

int foo_2_9() {
	alloc_2_9();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_9 {
	char *p;
};
struct A_2_9 a;

void alloc_2_9() {
	a.p = (int *)malloc(sizeof(int) * 5);
}

int foo_2_9() {
	alloc_2_9();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.10 在多级函数副作用后出现问题
struct A_2_10 {
	char *p;
};
struct A_2_10 a;
void alloc_2_10() {
	a.p = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_2_10() {
	alloc_2_10();
}
int foo_2_10() {
	callAlloc_2_10();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
struct A_2_10 {
	char *p;
};
struct A_2_10 a;
void alloc_2_10() {
	a.p = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_2_10() {
	alloc_2_10();
}
int foo_2_10() {
	callAlloc_2_10();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.11 在简单条件上出现问题
#include <stdlib.h>
struct A_2_11 {
	char *p;
	char b[5];
};
struct A_2_11 a;
// Array
int foo_2_11() {
	if (a.b[5] != 'a') {}
	return 0;
}

// Memory
int bar_2_11() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_11 {
	char *p;
	char b[5];
};
struct A_2_11 a;
// Array
int foo_2_11() {
	if (a.b[5] != 'a') {}
	return 0;
}

// Memory
int bar_2_11() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
2.12 在复合条件上出现问题
#include <stdlib.h>
struct A_2_12 {
	char *p;
	char b[5];
};
struct A_2_12 a;
// Array
int foo_2_12(int i) {
	if (a.b[5] != 'a' || i) {}
	return 0;
}

// Memory
int bar_2_12(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
struct A_2_12 {
	char *p;
	char b[5];
};
struct A_2_12 a;
// Array
int foo_2_12(int i) {
	if (a.b[5] != 'a' || i) {}
	return 0;
}

// Memory
int bar_2_12(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
================================================================================
3. 过程内类成员变量
--------------------------------------------------------------------------------
3.1 在顺序路径上出现问题
#include <stdlib.h>
class A_3_1 {
public:
	char *a;
	char b[5];
};

// Array
int foo_3_1() {
	A_3_1 a;
	a.b[5] = 'a';
	return 0;
}
// Memory
int bar_3_1() {
	A_3_1 a;
	a.a = 0;
	a.a = (char *)malloc(sizeof(char) * 5);
	a.a[5] = 'a';
	free(a.a);
	return 0;
}
#include <stdlib.h>
class A_3_1 {
public:
	char *a;
	char b[5];
};

// Array
int foo_3_1() {
	A_3_1 a;
	a.b[5] = 'a';
	return 0;
}
// Memory
int bar_3_1() {
	A_3_1 a;
	a.a = 0;
	a.a = (char *)malloc(sizeof(char) * 5);
	a.a[5] = 'a';
	free(a.a);
	return 0;
}
--------------------------------------------------------------------------------
3.2 在简单条件路径上出现问题
#include <stdlib.h>
class A_3_2 {
public:
	int *p;
	char b[5];
};
A_3_2 a;
// Array
int foo_3_2() {
	if (!a.b[5])
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_2() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_2 {
public:
	int *p;
	char b[5];
};
A_3_2 a;
// Array
int foo_3_2() {
	if (!a.b[5])
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_2() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.3 在复合条件路径上出现问题
#include <stdlib.h>
class A_3_3 {
public:
	int *p;
	char b[5];
};
A_3_3 a;
// Array
int foo_3_3(int i) {
	if (!a.b[5] || i)
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_3(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || !a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_3 {
public:
	int *p;
	char b[5];
};
A_3_3 a;
// Array
int foo_3_3(int i) {
	if (!a.b[5] || i)
		a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_3(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || !a.p)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.4 在组合条件路径上出现问题
#include <stdlib.h>
class A_3_4 {
public:
	char *p;
};
A_3_4 a;

// Memory
int bar_3_4(int i) {
	a.p = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(a.p);
		a.p = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_4 {
public:
	char *p;
};
A_3_4 a;

// Memory
int bar_3_4(int i) {
	a.p = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(a.p);
		a.p = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.5 在简单条件判断后出现问题
#include <stdlib.h>
class A_3_5 {
public:
	int *p;
	char b[5];
};
A_3_5 a;
// Array
int foo_3_5() {
	if (!a.b[5]) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_5() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_5 {
public:
	int *p;
	char b[5];
};
A_3_5 a;
// Array
int foo_3_5() {
	if (!a.b[5]) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_5() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.6 在复合条件判断后出现问题
#include <stdlib.h>
class A_3_6 {
public:
	int *p;
	char b[5];
};
A_3_6 a;
// Array
int foo_3_6(int i) {
	if (!a.b[5] || i) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_6(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p || i) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_6 {
public:
	int *p;
	char b[5];
};
A_3_6 a;
// Array
int foo_3_6(int i) {
	if (!a.b[5] || i) {}
	a.b[5] = 'a';
	return 0;
}

// Memory
int bar_3_6(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (!a.p || i) {}
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.7 在简单条件判断前出现问题
#include <stdlib.h>
class A_3_7 {
public:
	int *p;
	char b[5];
};
A_3_7 a;
// Array
int foo_3_7() {
	a.b[5] = 'a';
	if (!a.b[5]) {}
	return 0;
}

// Memory
int bar_3_7() {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p) {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_7 {
public:
	int *p;
	char b[5];
};
A_3_7 a;
// Array
int foo_3_7() {
	a.b[5] = 'a';
	if (!a.b[5]) {}
	return 0;
}

// Memory
int bar_3_7() {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p) {}
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.8 在复合条件判断前出现问题
#include <stdlib.h>
class A_3_8 {
public:
	int *p;
	char b[5];
};
A_3_8 a;
// Array
int foo_3_8(int i) {
	a.b[5] = 'a';
	if (!a.b[5] || i) {}
	return 0;
}

// Memory
int bar_3_8(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p || i) {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_8 {
public:
	int *p;
	char b[5];
};
A_3_8 a;
// Array
int foo_3_8(int i) {
	a.b[5] = 'a';
	if (!a.b[5] || i) {}
	return 0;
}

// Memory
int bar_3_8(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	a.p[5] = 'a';
	if (!a.p || i) {}
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.9 在单级函数副作用后出现问题
#include <stdlib.h>
class A_3_9 {
public:
	char *p;
};
A_3_9 a;

void alloc_3_9() {
	a.p = (int *)malloc(sizeof(int) * 5);
}

int foo_3_9() {
	alloc_3_9();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_9 {
public:
	char *p;
};
A_3_9 a;

void alloc_3_9() {
	a.p = (int *)malloc(sizeof(int) * 5);
}

int foo_3_9() {
	alloc_3_9();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.10 在多级函数副作用后出现问题
class A_3_10 {
public:
	char *p;
};
A_3_10 a;
void alloc_3_10() {
	a.p = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_3_10() {
	alloc_3_10();
}
int foo_3_10() {
	callAlloc_3_10();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
class A_3_10 {
public:
	char *p;
};
A_3_10 a;
void alloc_3_10() {
	a.p = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_3_10() {
	alloc_3_10();
}
int foo_3_10() {
	callAlloc_3_10();
	a.p[5] = 'a';
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.11 在简单条件上出现问题
#include <stdlib.h>
class A_3_11 {
public:
	char *p;
	char b[5];
};
A_3_11 a;
// Array
int foo_3_11() {
	if (a.b[5] != 'a') {}
	return 0;
}

// Memory
int bar_3_11() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_11 {
public:
	char *p;
	char b[5];
};
A_3_11 a;
// Array
int foo_3_11() {
	if (a.b[5] != 'a') {}
	return 0;
}

// Memory
int bar_3_11() {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
--------------------------------------------------------------------------------
3.12 在复合条件上出现问题
#include <stdlib.h>
class A_3_12 {
public:
	char *p;
	char b[5];
};
A_3_12 a;
// Array
int foo_3_12(int i) {
	if (a.b[5] != 'a' || i) {}
	return 0;
}

// Memory
int bar_3_12(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
#include <stdlib.h>
class A_3_12 {
public:
	char *p;
	char b[5];
};
A_3_12 a;
// Array
int foo_3_12(int i) {
	if (a.b[5] != 'a' || i) {}
	return 0;
}

// Memory
int bar_3_12(int i) {
	a.p = (int *)malloc(sizeof(int) * 5);
	if (i || a.p[5] != 'a') {}
	free(a.p);
	return 0;
}
================================================================================
4. 过程内数组成员变量
--------------------------------------------------------------------------------
4.1 在顺序路径上出现问题
#include <stdlib.h>

// Array
int foo_4_1() {
	char p[5][5] = {0};
	p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_1() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_1() {
	char p[5][5] = {0};
	p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_1() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.2 在简单条件路径上出现问题
#include <stdlib.h>

// Array
int foo_4_2() {
	char p[5][5] = {0};
	if (!p[0][5])
		p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_2() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (!p[0])
		p[0][5] = 'a';
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_2() {
	char p[5][5] = {0};
	if (!p[0][5])
		p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_2() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (!p[0])
		p[0][5] = 'a';
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.3 在复合条件路径上出现问题
#include <stdlib.h>

// Array
int foo_4_3(int i) {
	char p[5][5] = {0};
	if (!p[0][5] || i)
		p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_3(int i) {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (i || !p[0])
		p[0][5] = 'a';
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_3(int i) {
	char p[5][5] = {0};
	if (!p[0][5] || i)
		p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_3(int i) {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (i || !p[0])
		p[0][5] = 'a';
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.4 在组合条件路径上出现问题
#include <stdlib.h>

// Memory
int bar_4_4(int i) {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(p[0]);
		p[0] = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		p[0][5] = 'a';
	free(p[0]);
	return 0;
}

#include <stdlib.h>

// Memory
int bar_4_4(int i) {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 10);
	if (i == 1) {
		free(p[0]);
		p[0] = (int *)malloc(sizeof(int) * 5);
	}
	if (i == 2)
		p[0][5] = 'a';
	free(p[0]);
	return 0;
}

--------------------------------------------------------------------------------
4.5 在简单条件判断后出现问题
#include <stdlib.h>

// Array
int foo_4_5() {
	char p[5][5] = {0};
	if (!p[0][5]) {}
	p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_5() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (!p[0]) {}
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_5() {
	char p[5][5] = {0};
	if (!p[0][5]) {}
	p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_5() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (!p[0]) {}
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.6 在复合条件判断后出现问题
#include <stdlib.h>

// Array
int foo_4_6(int i) {
	char p[5][5] = {0};
	if (!p[0][5] || i) {}
	p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_6() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (!p[0] || i) {}
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_6(int i) {
	char p[5][5] = {0};
	if (!p[0][5] || i) {}
	p[0][5] = 'a';
	return 0;
}

// Memory
int bar_4_6() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (!p[0] || i) {}
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.7 在简单条件判断前出现问题
#include <stdlib.h>

// Array
int foo_4_7() {
	char p[5][5] = {0};
	p[0][5] = 'a';
	if (!p[0][5]) {}
	return 0;
}

// Memory
int bar_4_7() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	p[0][5] = 'a';
	if (!p[0]) {}
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_7() {
	char p[5][5] = {0};
	p[0][5] = 'a';
	if (!p[0][5]) {}
	return 0;
}

// Memory
int bar_4_7() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	p[0][5] = 'a';
	if (!p[0]) {}
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.8 在复合条件判断前出现问题
#include <stdlib.h>

// Array
int foo_4_8(int i) {
	char p[5][5] = {0};
	p[0][5] = 'a';
	if (!p[0][5] || i) {}
	return 0;
}

// Memory
int bar_4_8() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	p[0][5] = 'a';
	if (!p[0] || i) {}
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_8(int i) {
	char p[5][5] = {0};
	p[0][5] = 'a';
	if (!p[0][5] || i) {}
	return 0;
}

// Memory
int bar_4_8() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	p[0][5] = 'a';
	if (!p[0] || i) {}
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.9 在单级函数副作用后出现问题
#include <stdlib.h>

int *p[5];
void alloc_4_9() {
	p[0] = (int *)malloc(sizeof(int) * 5);
}

int foo_4_9() {
	alloc_4_9();
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
#include <stdlib.h>

int *p[5];
void alloc_4_9() {
	p[0] = (int *)malloc(sizeof(int) * 5);
}

int foo_4_9() {
	alloc_4_9();
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.10 在多级函数副作用后出现问题
#include <stdlib.h>
int *p[5];
void alloc_4_10() {
	p[0] = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_4_10() {
	alloc_4_10();
}
int foo_4_10() {
	callAlloc_4_10();
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
#include <stdlib.h>
int *p[5];
void alloc_4_10() {
	p[0] = (int *)malloc(sizeof(int) * 5);
}
void callAlloc_4_10() {
	alloc_4_10();
}
int foo_4_10() {
	callAlloc_4_10();
	p[0][5] = 'a';
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.11 在简单条件上出现问题
#include <stdlib.h>

// Array
int foo_4_11() {
	char p5][5];
	if (p[0][5] != 'a') {}
	return 0;
}

// Memory
int bar_4_11() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (p[0][5] != 'a') {}
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_11() {
	char p5][5];
	if (p[0][5] != 'a') {}
	return 0;
}

// Memory
int bar_4_11() {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (p[0][5] != 'a') {}
	free(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
4.12 在复合条件上出现问题
#include <stdlib.h>

// Array
int foo_4_12(int i) {
	char p[5][5];
	if (p[0][5] != 'a') {}
	return 0;
}

// Memory
int bar_4_12(int i) {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (p[0][5] != 'a') {}
	free(p[0]);
	return 0;
}
#include <stdlib.h>

// Array
int foo_4_12(int i) {
	char p[5][5];
	if (p[0][5] != 'a') {}
	return 0;
}

// Memory
int bar_4_12(int i) {
	int *p[5];
	p[0] = (int *)malloc(sizeof(int) * 5);
	if (p[0][5] != 'a') {}
	free(p[0]);
	return 0;
}
================================================================================
5. 过程内临时变量
--------------------------------------------------------------------------------
5.1 在顺序路径上出现问题
#include <stdlib.h>
int *alloc_5_1() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_1() {
	alloc_5_1()[5] = 0;
	return 0;
}
#include <stdlib.h>
int *alloc_5_1() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_1() {
	alloc_5_1()[5] = 0;
	return 0;
}
--------------------------------------------------------------------------------
5.2 在简单条件路径上出现问题
#include <stdlib.h>
int *alloc_5_2() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_2() {
	if (alloc_5_2())
		alloc_5_2()[5] = 0;
	return 0;
}
#include <stdlib.h>
int *alloc_5_2() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_2() {
	if (alloc_5_2())
		alloc_5_2()[5] = 0;
	return 0;
}
--------------------------------------------------------------------------------
5.3 在复合条件路径上出现问题
#include <stdlib.h>
int *alloc_5_3() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_3(int i) {
	if (alloc_5_3() || i)
		alloc_5_3()[5] = 0;
	return 0;
}
#include <stdlib.h>
int *alloc_5_3() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_3(int i) {
	if (alloc_5_3() || i)
		alloc_5_3()[5] = 0;
	return 0;
}
--------------------------------------------------------------------------------
5.4 在组合条件路径上出现问题
#include <stdlib.h>
int *alloc_5_4() {
	return (int *)malloc(sizeof(int) * 5);
}
int bar_5_4(int i, int j) {
	if (i)
		alloc_5_4();
	if (j)
		alloc_5_4()[5] = 0;
	return 0;
}
#include <stdlib.h>
int *alloc_5_4() {
	return (int *)malloc(sizeof(int) * 5);
}
int bar_5_4(int i, int j) {
	if (i)
		alloc_5_4();
	if (j)
		alloc_5_4()[5] = 0;
	return 0;
}
--------------------------------------------------------------------------------
5.5 在简单条件判断后出现问题
#include <stdlib.h>
int *alloc_5_5() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_5() {
	if (alloc_5_5()) {}
	alloc_5_5()[5] = 0;
	return 0;
}
#include <stdlib.h>
int *alloc_5_5() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_5() {
	if (alloc_5_5()) {}
	alloc_5_5()[5] = 0;
	return 0;
}
--------------------------------------------------------------------------------
5.6 在复合条件判断后出现问题
#include <stdlib.h>
int *alloc_5_6() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_6(int i) {
	if (alloc_5_6() || i) {}
	alloc_5_6()[5] = 0;
	return 0;
}
#include <stdlib.h>
int *alloc_5_6() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_6(int i) {
	if (alloc_5_6() || i) {}
	alloc_5_6()[5] = 0;
	return 0;
}
--------------------------------------------------------------------------------
5.7 在简单条件判断前出现问题
#include <stdlib.h>
int *alloc_5_7() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_7() {
	alloc_5_7()[5] = 0;
	if (alloc_5_7()) {}
	return 0;
}
#include <stdlib.h>
int *alloc_5_7() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_7() {
	alloc_5_7()[5] = 0;
	if (alloc_5_7()) {}
	return 0;
}
--------------------------------------------------------------------------------
5.8 在复合条件判断前出现问题
#include <stdlib.h>
int *alloc_5_8() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_8(int i) {
	alloc_5_8()[5] = 0;
	if (alloc_5_8() || i) {}
	return 0;
}
#include <stdlib.h>
int *alloc_5_8() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_8(int i) {
	alloc_5_8()[5] = 0;
	if (alloc_5_8() || i) {}
	return 0;
}
--------------------------------------------------------------------------------
5.9 在简单条件上出现问题
#include <stdlib.h>
int *alloc_5_9() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_9() {
	if (alloc_5_9()[5] == 0) {}
	return 0;
}
#include <stdlib.h>
int *alloc_5_9() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_9() {
	if (alloc_5_9()[5] == 0) {}
	return 0;
}
--------------------------------------------------------------------------------
5.10 在复合条件上出现问题
#include <stdlib.h>
int *alloc_5_10() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_10(int i) {
	if (i || alloc_5_10()[5] == 0) {}
	return 0;
}
#include <stdlib.h>
int *alloc_5_10() {
	return (int *)malloc(sizeof(int) * 5);
}
int foo_5_10(int i) {
	if (i || alloc_5_10()[5] == 0) {}
	return 0;
}
================================================================================
6. 过程间单级约束
--------------------------------------------------------------------------------
6.1 约束参数变量
#include <stdlib.h>
// Array
void foo_6_1(char p[5]) {
	p[5] = 'a';
}
int bar_6_1() {
	char p[5] = {0};
	foo_6_1(p);
	return 0;
}

// Memory
void fooa_6_1(char *p) {
	p[5] = 'a';
}
int bara_6_1() {
	char *p = (char *)malloc(sizeof(char) * 5);
	fooa_6_1(p);
	free(p);
	return 0;
}
#include <stdlib.h>
// Array
void foo_6_1(char p[5]) {
	p[5] = 'a';
}
int bar_6_1() {
	char p[5] = {0};
	foo_6_1(p);
	return 0;
}

// Memory
void fooa_6_1(char *p) {
	p[5] = 'a';
}
int bara_6_1() {
	char *p = (char *)malloc(sizeof(char) * 5);
	fooa_6_1(p);
	free(p);
	return 0;
}
--------------------------------------------------------------------------------
6.2 约束简单全局变量
#include <stdlib.h>
// Array
char p[5];
void foo_6_2() {
	p[5] = 'a';
}
int bar_6_2() {
	foo_6_2();
	return 0;
}

// Memory
char *b;
void fooa_6_2() {
	b[5] = 'a';
}
int bara_6_2() {
	b = (char *)malloc(sizeof(char) * 5);
	fooa_6_2();
	free(b);
	return 0;
}
#include <stdlib.h>
// Array
char p[5];
void foo_6_2() {
	p[5] = 'a';
}
int bar_6_2() {
	foo_6_2();
	return 0;
}

// Memory
char *b;
void fooa_6_2() {
	b[5] = 'a';
}
int bara_6_2() {
	b = (char *)malloc(sizeof(char) * 5);
	fooa_6_2();
	free(b);
	return 0;
}
--------------------------------------------------------------------------------
6.3 约束结构成员全局变量
#include <stdlib.h>
struct A_6_3 {
	char p[5];
	char *b;
};
struct A_6_3 a;

// Array
void foo_6_3() {
	a.p[5] = 'a';
}
int bar_6_3() {
	foo_6_3();
	return 0;
}

// Memory
void fooa_6_3() {
	a.b[5] = 'a';
}
int bara_6_3() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_6_3();
	free(a.b);
	return 0;
}
#include <stdlib.h>
struct A_6_3 {
	char p[5];
	char *b;
};
struct A_6_3 a;

// Array
void foo_6_3() {
	a.p[5] = 'a';
}
int bar_6_3() {
	foo_6_3();
	return 0;
}

// Memory
void fooa_6_3() {
	a.b[5] = 'a';
}
int bara_6_3() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_6_3();
	free(a.b);
	return 0;
}
--------------------------------------------------------------------------------
6.4 约束类成员全局变量
#include <stdlib.h>
class A_6_4 {
public:
	char p[5];
	char *b;
};
A_6_4 a;

// Array
void foo_6_4() {
	a.p[5] = 'a';
}
int bar_6_4() {
	foo_6_4();
	return 0;
}

// Memory
void fooa_6_4() {
	a.b[5] = 'a';
}
int bara_6_4() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_6_4();
	free(a.b);
	return 0;
}
#include <stdlib.h>
class A_6_4 {
public:
	char p[5];
	char *b;
};
A_6_4 a;

// Array
void foo_6_4() {
	a.p[5] = 'a';
}
int bar_6_4() {
	foo_6_4();
	return 0;
}

// Memory
void fooa_6_4() {
	a.b[5] = 'a';
}
int bara_6_4() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_6_4();
	free(a.b);
	return 0;
}
--------------------------------------------------------------------------------
6.5 约束数组成员全局变量
#include <stdlib.h>
// Array
char p[5][5];
void foo_6_5() {
	p[0][5] = 'a';
}
int bar_6_5() {
	foo_6_5();
	return 0;
}

// Memory
char *b[5];
void fooa_6_5() {
	b[0][5] = 'a';
}
int bara_6_5() {
	b[0] = (char *)malloc(sizeof(char) * 5);
	fooa_6_5();
	free(b[0]);
	return 0;
}
#include <stdlib.h>
// Array
char p[5][5];
void foo_6_5() {
	p[0][5] = 'a';
}
int bar_6_5() {
	foo_6_5();
	return 0;
}

// Memory
char *b[5];
void fooa_6_5() {
	b[0][5] = 'a';
}
int bara_6_5() {
	b[0] = (char *)malloc(sizeof(char) * 5);
	fooa_6_5();
	free(b[0]);
	return 0;
}
================================================================================
7. 过程间多级约束
--------------------------------------------------------------------------------
7.1 约束参数变量
#include <stdlib.h>
// Array
void foo_7_1(char p[5]) {
	p[5] = 'a';
}
void baz_7_1(char p[5]) {
	foo_7_1(p);
}
int bar_7_1() {
	char p[5] = {0};
	baz_7_1(p);
	return 0;
}

// Memory
void fooa_7_1(char *p) {
	p[5] = 'a';
}
void baza_7_1(char *p) {
	fooa_7_1(p);
}
int bara_7_1() {
	char *p = (char *)malloc(sizeof(char) * 5);
	baza_7_1(p);
	free(p);
	return 0;
}

#include <stdlib.h>
// Array
void foo_7_1(char p[5]) {
	p[5] = 'a';
}
void baz_7_1(char p[5]) {
	foo_7_1(p);
}
int bar_7_1() {
	char p[5] = {0};
	baz_7_1(p);
	return 0;
}

// Memory
void fooa_7_1(char *p) {
	p[5] = 'a';
}
void baza_7_1(char *p) {
	fooa_7_1(p);
}
int bara_7_1() {
	char *p = (char *)malloc(sizeof(char) * 5);
	baza_7_1(p);
	free(p);
	return 0;
}

--------------------------------------------------------------------------------
7.2 约束简单全局变量
#include <stdlib.h>
// Array
char p[5];
void foo_7_2() {
	p[5] = 'a';
}
void baz_7_2() {
	foo_7_2();
}
int bar_7_2() {
	baz_7_2();
	return 0;
}

// Memory
char *b;
void fooa_7_2() {
	b[5] = 'a';
}
void baza_7_2() {
	fooa_7_2();
}
int bara_7_2() {
	b = (char *)malloc(sizeof(char) * 5);
	baza_7_2();
	free(b);
	return 0;
}

#include <stdlib.h>
// Array
char p[5];
void foo_7_2() {
	p[5] = 'a';
}
void baz_7_2() {
	foo_7_2();
}
int bar_7_2() {
	baz_7_2();
	return 0;
}

// Memory
char *b;
void fooa_7_2() {
	b[5] = 'a';
}
void baza_7_2() {
	fooa_7_2();
}
int bara_7_2() {
	b = (char *)malloc(sizeof(char) * 5);
	baza_7_2();
	free(b);
	return 0;
}

--------------------------------------------------------------------------------
7.3 约束结构成员全局变量
#include <stdlib.h>
struct A_7_3 {
	char p[5];
	char *b;
};
struct A_7_3 a;
// Array
void foo_7_3() {
	a.p[5] = 'a';
}
void baz_7_3() {
	foo_7_3();
}
int bar_7_3() {
	baz_7_3();
	return 0;
}

// Memory
void fooa_7_3() {
	a.b[5] = 'a';
}
void baza_7_3() {
	fooa_7_3();
}
int bara_7_3() {
	a.b = (char *)malloc(sizeof(char) * 5);
	baza_7_3();
	free(a.b);
	return 0;
}

#include <stdlib.h>
struct A_7_3 {
	char p[5];
	char *b;
};
struct A_7_3 a;
// Array
void foo_7_3() {
	a.p[5] = 'a';
}
void baz_7_3() {
	foo_7_3();
}
int bar_7_3() {
	baz_7_3();
	return 0;
}

// Memory
void fooa_7_3() {
	a.b[5] = 'a';
}
void baza_7_3() {
	fooa_7_3();
}
int bara_7_3() {
	a.b = (char *)malloc(sizeof(char) * 5);
	baza_7_3();
	free(a.b);
	return 0;
}

--------------------------------------------------------------------------------
7.4 约束类成员全局变量
#include <stdlib.h>
class A_7_4 {
public:
	char p[5];
	char *b;
};
A_7_4 a;
// Array
void foo_7_4() {
	a.p[5] = 'a';
}
void baz_7_4() {
	foo_7_4();
}
int bar_7_4() {
	baz_7_4();
	return 0;
}

// Memory
void fooa_7_4() {
	a.b[5] = 'a';
}
void baza_7_4() {
	fooa_7_4();
}
int bara_7_4() {
	a.b = (char *)malloc(sizeof(char) * 5);
	baza_7_4();
	free(a.b);
	return 0;
}

#include <stdlib.h>
class A_7_4 {
public:
	char p[5];
	char *b;
};
A_7_4 a;
// Array
void foo_7_4() {
	a.p[5] = 'a';
}
void baz_7_4() {
	foo_7_4();
}
int bar_7_4() {
	baz_7_4();
	return 0;
}

// Memory
void fooa_7_4() {
	a.b[5] = 'a';
}
void baza_7_4() {
	fooa_7_4();
}
int bara_7_4() {
	a.b = (char *)malloc(sizeof(char) * 5);
	baza_7_4();
	free(a.b);
	return 0;
}

--------------------------------------------------------------------------------
7.5 约束数组成员全局变量
#include <stdlib.h>
// Array
char p[5][5];
void foo_7_5() {
	p[0][5] = 'a';
}
void baz_7_5() {
	foo_7_5();
}
int bar_7_5() {
	baz_7_5();
	return 0;
}

// Memory
char *b[5];
void fooa_7_5() {
	b[0][5] = 'a';
}
void baza_7_5() {
	fooa_7_5();
}
int bara_7_5() {
	b[0] = (char *)malloc(sizeof(char) * 5);
	baza_7_5();
	free(b[0]);
	return 0;
}
#include <stdlib.h>
// Array
char p[5][5];
void foo_7_5() {
	p[0][5] = 'a';
}
void baz_7_5() {
	foo_7_5();
}
int bar_7_5() {
	baz_7_5();
	return 0;
}

// Memory
char *b[5];
void fooa_7_5() {
	b[0][5] = 'a';
}
void baza_7_5() {
	fooa_7_5();
}
int bara_7_5() {
	b[0] = (char *)malloc(sizeof(char) * 5);
	baza_7_5();
	free(b[0]);
	return 0;
}
================================================================================
8. 过程间缺陷对象
--------------------------------------------------------------------------------
8.1 参数变量
#include <stdlib.h>

// Array
void foo_8_1(char p) {
}
void bar_8_1(char p[5]) {
	foo_8_1(p[5]);
}

// Memory
void fooa_8_1(char p) {
}
void bara_8_1(char *p) {
	p = (char *)malloc(sizeof(char) * 5);
	fooa_8_1(p[5]);
}

#include <stdlib.h>

// Array
void foo_8_1(char p) {
}
void bar_8_1(char p[5]) {
	foo_8_1(p[5]);
}

// Memory
void fooa_8_1(char p) {
}
void bara_8_1(char *p) {
	p = (char *)malloc(sizeof(char) * 5);
	fooa_8_1(p[5]);
}

--------------------------------------------------------------------------------
8.2 简单全局变量
#include <stdlib.h>

// Array
char p[5];
void foo_8_2(char p) {
}
void bar_8_2() {
	foo_8_2(p[5]);
}

// Memory
char *b;
void fooa_8_2(char p) {
}
void bara_8_2() {
	b = (char *)malloc(sizeof(char) * 5);
	fooa_8_2(b[5]);
}

#include <stdlib.h>

// Array
char p[5];
void foo_8_2(char p) {
}
void bar_8_2() {
	foo_8_2(p[5]);
}

// Memory
char *b;
void fooa_8_2(char p) {
}
void bara_8_2() {
	b = (char *)malloc(sizeof(char) * 5);
	fooa_8_2(b[5]);
}

--------------------------------------------------------------------------------
8.3 结构成员全局变量
#include <stdlib.h>
struct A_8_3 {
	char p[5];
	char *b;
};
struct A_8_3 a;

// Array
void foo_8_3(char p) {
}
void bar_8_3() {
	foo_8_3(a.p[5]);
}

// Memory
void fooa_8_3(char p) {
}
void bara_8_3() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_8_3(a.b[5]);
}
#include <stdlib.h>
struct A_8_3 {
	char p[5];
	char *b;
};
struct A_8_3 a;

// Array
void foo_8_3(char p) {
}
void bar_8_3() {
	foo_8_3(a.p[5]);
}

// Memory
void fooa_8_3(char p) {
}
void bara_8_3() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_8_3(a.b[5]);
}
--------------------------------------------------------------------------------
8.4 类成员全局变量
#include <stdlib.h>
class A_8_4 {
public:
	char p[5];
	char *b;
};
A_8_4 a;

// Array
void foo_8_4(char p) {
}
void bar_8_4() {
	foo_8_4(a.p[5]);
}

// Memory
void fooa_8_4(char p) {
}
void bara_8_4() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_8_4(a.b[5]);
}
#include <stdlib.h>
class A_8_4 {
public:
	char p[5];
	char *b;
};
A_8_4 a;

// Array
void foo_8_4(char p) {
}
void bar_8_4() {
	foo_8_4(a.p[5]);
}

// Memory
void fooa_8_4(char p) {
}
void bara_8_4() {
	a.b = (char *)malloc(sizeof(char) * 5);
	fooa_8_4(a.b[5]);
}
--------------------------------------------------------------------------------
8.5 数组成员全局变量
#include <stdlib.h>

// Array
char p[5][5];
void foo_8_5(char p) {
}
void bar_8_5() {
	foo_8_5(p[0][5]);
}

// Memory
char *b[5];
void fooa_8_5(char p) {
}
void bara_8_5() {
	b[0] = (char *)malloc(sizeof(char) * 5);
	fooa_8_5(b[0][5]);
}

#include <stdlib.h>

// Array
char p[5][5];
void foo_8_5(char p) {
}
void bar_8_5() {
	foo_8_5(p[0][5]);
}

// Memory
char *b[5];
void fooa_8_5(char p) {
}
void bara_8_5() {
	b[0] = (char *)malloc(sizeof(char) * 5);
	fooa_8_5(b[0][5]);
}

--------------------------------------------------------------------------------
8.6 库函数临时变量
#include <stdlib.h>

// Memory
void fooa_8_6(char p) {
}
void bara_8_6() {
	fooa_8_6(((char *)malloc(sizeof(char) * 5))[5]);
}
#include <stdlib.h>

// Memory
void fooa_8_6(char p) {
}
void bara_8_6() {
	fooa_8_6(((char *)malloc(sizeof(char) * 5))[5]);
}
--------------------------------------------------------------------------------
8.7 自定义函数临时变量
#include <stdlib.h>

// Memory
void fooa_8_7(char p) {
}
char *baza_8_7() {
	return (char *)malloc(sizeof(char) * 5);
}
void bara_8_7(char *p) {
	fooa_8_7(baza_8_7()[5]);
}

#include <stdlib.h>

// Memory
void fooa_8_7(char p) {
}
char *baza_8_7() {
	return (char *)malloc(sizeof(char) * 5);
}
void bara_8_7(char *p) {
	fooa_8_7(baza_8_7()[5]);
}

================================================================================
