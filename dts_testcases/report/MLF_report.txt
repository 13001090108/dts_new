DTS测试用例开发规范
================================================================================
1. 过程内简单变量
--------------------------------------------------------------------------------
1.1 在顺序路径上出现问题
#include <stdlib.h>
int foo_1_1(){
  	char *p=(char*)malloc(sizeof(char));
    return 0;
  }
int foo_1_1() {
	int a, b;
	b = a;
	return 0;
}

// Memory
int bar_1_1() {
	int *p;
	*p = 1;
	return 0;
}
--------------------------------------------------------------------------------
1.2 在简单条件路径上出现问题
#include <stdlib.h>
int foo_1_2(){
    char *p=(char*)malloc(sizeof(char));
    if(p) {
          return 0;
    }
}


int foo_1_2() {
	char p;
	if (p) {
		p = 'a';
	}
	return 0;
}

// Memory
int bar_1_2() {
	char *p;
	if (!p) {
		*p = 'a';
	}
	return 0;
}
--------------------------------------------------------------------------------
1.3 在复合条件路径上出现问题
#include <stdlib.h>
int foo_1_3(int i) {
    char *p = (char*)malloc(sizeof(char));
    if (i || p)
       return 0;
    free(p);
    return 0;
}


int foo_1_3(int i) {
	char p;
	if (i || p) {
		p = 'a';
	}
	return 0;
}

// Memory
int bar_1_3(int i) {
	char *p;
	if (i || !p) {
		*p = 'a';
	}
	return 0;
}
--------------------------------------------------------------------------------
1.4 在组合条件路径上出现问题
#include <stdlib.h>
int foo_1_4(int i, int j) {
    char *p = (char*)malloc(sizeof(char));
    if (i)
        free(p);
    if(j)
         return 0;
    return 0;
}



//#include <stdlib.h>
//
//// Memory
//int bar_1_4(int i) {
//	int *p;
//	p = (int *)malloc(sizeof(int) * 10);
//	if (i == 1) {
//		free(p);
//		p = (int *)malloc(sizeof(int) * 5);
//	}
//	if (i == 2)
//		p[5] = 'a';
//	free(p);
//	return 0;
//}
//
--------------------------------------------------------------------------------
1.5 在简单条件判断后出现问题
#include <stdlib.h>
int foo_1_5() {
    char *p = (char*)malloc(sizeof(char));
    if (p) ;
    return 0;
}




int foo_1_5() {
	char p;
	if (p) {}
	p = 'a';
	return 0;
}

// Memory
int bar_1_5() {
	char *p;
	if (p) {}
	*p = 'a';
	return 0;
}
--------------------------------------------------------------------------------
1.6 在复合条件判断后出现问题
#include <stdlib.h>
int foo_1_6(int i) {
    char *p = (char*)malloc(sizeof(char));
    if (i || p);
    return 0;
}





int foo_1_6(int i) {
	char p;
	if (i || p) {}
	p = 'a';
	return 0;
}

// Memory
int bar_1_6(int i) {
	char *p;
	if (i || p) {}
	*p = 'a';
	return 0;
}
--------------------------------------------------------------------------------
1.7 在简单条件判断前出现问题
#include <stdlib.h>
int foo_1_7() {
    char *p = (char*)malloc(sizeof(char));
    return 0;
    if (p) ;
}






int foo_1_7() {
	char p;
	p = 'a';
	if (p) {}
	return 0;
}

// Memory
int bar_1_7() {
	char *p;
	*p = 'a';
	if (p) {}
	return 0;
}
--------------------------------------------------------------------------------
1.8 在复合条件判断前出现问题
#include <stdlib.h>
int foo_1_8(int i) {
    char *p = (char*)malloc(sizeof(char));
    return 0;
    if (i || p);
}





int foo_1_8(int i) {
	char p;
	p = 'a';
	if (i || p) {}
	return 0;
}

// Memory
int bar_1_8(int i) {
	char *p;
	*p = 'a';
	if (i || p) {}
	return 0;
}
--------------------------------------------------------------------------------
1.9 在单级函数副作用后出现问题
#include <stdlib.h>
void setNull_1_9() {
    char *p = (char*)malloc(sizeof(char));
    }
int foo_1_9() {
    setNull_1_9();
    return 0;
}






int b, a;
void f_1_9() {
	b = a;
}
int bar_1_9(){
	f_1_9();
	return 0;
}

// Memory
int *p;
void alloc_1_9() {
	*p = 1;
}
int foo_1_9() {
	alloc_1_9();
	return 0;
}
--------------------------------------------------------------------------------
1.10 在多级函数副作用后出现问题
#include <stdlib.h>
void setNull_1_10() {
     char *p = (char*)malloc(12);}
void callSetNull_1_10() {
     setNull_1_10 ();
}
int foo_1_10 () {
    callSetNull_1_10();
    return 0;
}







int b, a;
void f_1_10() {
	b = a;
}
void callF_1_10() {
	f_1_10();
}
int bar_1_10(){
	callF_1_10();
	return 0;
}

// Memory
int *p;
void alloc_1_10() {
	*p = 1;
}
void callAlloc_1_10() {
	alloc_1_10();
}
int foo_1_10() {
	callAlloc_1_10();
	return 0;
}
--------------------------------------------------------------------------------
1.11 在简单条件上出现问题
#include <stdlib.h>
int foo_1_11() {
    char *p;
    if (p = (char*)malloc(sizeof(char))) {
       return 0;
    }
}







int foo_1_11() {
	char p;
	if (p != 'a') {}
	return 0;
}

// Memory
int bar_1_11() {
	char *p;
	if (*p != 'a') {}
	return 0;
}
--------------------------------------------------------------------------------
1.12 在复合条件上出现问题
#include <stdlib.h>
int foo_1_12(int i) {
    char *p;
    if ( (i==0) &&(p = (char*)malloc(sizeof(char))) ) 
        return 0;
}












int foo_1_12(int i) {
	char p;
	if (i || p != 'a') {}
	return 0;
}

// Memory
int bar_1_12(int i) {
	char *p;
	if (i || *p != 'a') {}
	return 0;
}
================================================================================
2. 过程内结构体成员变量
--------------------------------------------------------------------------------
2.1 在顺序路径上出现问题
#include <stdlib.h>
struct A_2_1 {
       char *p;
};
int foo_2_1() {
    struct A_2_1 a;
    a.p=(char*)malloc(sizeof(char));
    return 0;
}









struct A_2_1 {
	int a;
	int b;
	int *p;
};
int foo_2_1() {
	struct A_2_1 a;
	a.b = a.a;
	return 0;
}

// Memory
int bar_2_1() {
	struct A_2_1 a;
	*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
2.2 在简单条件路径上出现问题
#include <stdlib.h>
struct A_2_2 {
       char *p;
};
int foo_2_2() {
    struct A_2_2 a;
    a.p=(char*)malloc(sizeof(char));
    if (a.p)
       return 0;
    free(a.p);
    return 0;
}









struct A_2_2 {
	int a;
	int b;
	int *p;
};
int foo_2_2() {
	struct A_2_2 a;
	if (a.a)
		a.b = a.a;
	return 0;
}

// Memory
int bar_2_2() {
	struct A_2_2 a;
	if (!a.p)
		*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
2.3 在复合条件路径上出现问题
#include <stdlib.h>
struct A_2_3 {
       char *p;
};
int foo_2_3(int i) {
    struct A_2_3 a;
    a.p=(char*)malloc(sizeof(char));
    if (i || a.p)
       return 0;
    free(a.p);
    return 0;
}










struct A_2_3 {
	int a;
	int b;
	int *p;
};
int foo_2_3(int i) {
	struct A_2_3 a;
	if (i || a.a)
		a.b = a.a;
	return 0;
}

// Memory
int bar_2_3(int i) {
	struct A_2_3 a;
	if (i || !a.p)
		*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
2.4 在组合条件路径上出现问题
#include <stdlib.h>
struct A_2_4 {
       char *p;
};
int foo_2_4 (int i, int j) {
    struct A_2_4 a;
    a.p=(char*)malloc(sizeof(char));
    if (i)
       *a.p='a';
    if(j){
       *a.p='b';
       free(a.p);
    }
    return 0;
}











//#include <stdlib.h>
//struct A_2_4 {
//	char *p;
//};
//struct A_2_4 a;
//
//// Memory
//int bar_2_4(int i) {
//	a.p = (int *)malloc(sizeof(int) * 10);
//	if (i == 1) {
//		free(a.p);
//		a.p = (int *)malloc(sizeof(int) * 5);
//	}
//	if (i == 2)
//		a.p[5] = 'a';
//	free(a.p);
//	return 0;
//}
--------------------------------------------------------------------------------
2.5 在简单条件判断后出现问题
#include <stdlib.h>
struct A_2_5 {
       char *p;
};
int foo_2_5() {
    struct A_2_5 a;
    a.p= (char*)malloc(sizeof(char));
    if (!a.p) ;
    return 0;
}












struct A_2_5 {
	int a;
	int b;
	int *p;
};
int foo_2_5() {
	struct A_2_5 a;
	if (a.a) {}
	a.b = a.a;
	return 0;
}

// Memory
int bar_2_5() {
	struct A_2_5 a;
	if (!a.p) {}
	*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
2.6 在复合条件判断后出现问题
#include <stdlib.h>
struct A_2_6 {
       char *p;
};
int foo_2_6(int i) {
    struct A_2_6 a;
    a.p= (char*)malloc(sizeof(char));
    if (i || !a.p) ;
    return 0;
}













struct A_2_6 {
	int a;
	int b;
	int *p;
};
int foo_2_6(int i) {
	struct A_2_6 a;
	if (i || a.a) {}
	a.b = a.a;
	return 0;
}

// Memory
int bar_2_6(int i) {
	struct A_2_6 a;
	if (i || !a.p) {}
	*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
2.7 在简单条件判断前出现问题
#include <stdlib.h>
struct A_2_7 {
       char *p;
};
int foo_2_7() {
    struct A_2_7 a;
    a.p= (char*)malloc(sizeof(char));
    return 0;
    if (!a.p) ;
}














struct A_2_7 {
	int a;
	int b;
	int *p;
};
int foo_2_7() {
	struct A_2_7 a;
	a.b = a.a;
	if (a.a) {}
	return 0;
}

// Memory
int bar_2_7() {
	struct A_2_7 a;
	*a.p = 1;
	if (!a.p) {}
	return 0;
}
--------------------------------------------------------------------------------
2.8 在复合条件判断前出现问题
#include <stdlib.h>
struct A_2_8 {
       char *p;
};
int foo_2_8(int i) {
    struct A_2_8 a;
    a.p= (char*)malloc(sizeof(char));
    return 0;
    if (i || !a.p) ;
}













struct A_2_8 {
	int a;
	int b;
	int *p;
};
int foo_2_8(int i) {
	struct A_2_8 a;
	a.b = a.a;
	if (i || a.a) {}
	return 0;
}

// Memory
int bar_2_8(int i) {
	struct A_2_8 a;
	*a.p = 1;
	if (i || !a.p) {}
	return 0;
}
--------------------------------------------------------------------------------
2.9 在单级函数副作用后出现问题
#include <stdlib.h>
struct A_2_9 {
       char *p;
};
struct A_2_9 a;
void setNull_2_9() {
     a.p= (char*)malloc(sizeof(char));
}
int foo_2_9() {
    setNull_2_9();
    return 0;
}












struct A_2_9 {
	int a;
	int b;
	int *p;
};
struct A_2_9 a;
void f_2_9() {
	a.b = a.a;
}
int bar_2_9(){
	f_2_9();
	return 0;
}

// Memory
void alloc_2_9() {
	*a.p = 1;
}
int foo_2_9() {
	alloc_2_9();
	return 0;
}
--------------------------------------------------------------------------------
2.10 在多级函数副作用后出现问题
#include <stdlib.h>
struct A_2_10 {
       char *p;
};
struct A_2_10 a;
void setNull_2_10() {
     a.p= (char*)malloc(sizeof(char));
}
void callSetNull_2_10() {
     setNull_2_10();
}
int foo_2_10() {
    callSetNull_2_10 ();
    return 0;
}











struct A_2_10 {
	int a;
	int b;
	int *p;
};
struct A_2_10 a;
void f_2_10() {
	a.b = a.a;
}
void callF_2_10() {
	f_2_10();
}
int bar_2_10(){
	callF_2_10();
	return 0;
}

// Memory
void alloc_2_10() {
	*a.p = 1;
}
void callAlloc_2_10() {
	alloc_2_10();
}
int foo_2_10() {
	callAlloc_2_10();
	return 0;
}
--------------------------------------------------------------------------------
2.11 在简单条件上出现问题
#include <stdlib.h>
struct A_2_11 {
       char *p;
};
int foo_2_11() {
    struct A_2_11 a;
    if (a.p= (char*)malloc(sizeof(char))) {
       return 0;
    }
    return 0;
}












struct A_2_11 {
	int a;
	int b;
	int *p;
};
int foo_2_11() {
	struct A_2_11 a;
	if (a.a != 'a') {}
	return 0;
}

// Memory
int bar_2_11() {
	struct A_2_11 a;
	if (*a.p != 'a') {}
	return 0;
}
--------------------------------------------------------------------------------
2.12 在复合条件上出现问题
#include <stdlib.h>
struct A_2_12 {
       char *p;
};
int foo_2_12(int i) {
    struct A_2_12 a;
    if ((i == 1) && (a.p=(char*)malloc(sizeof(char))) ) {
       return 0;
        }
    return 0;
}












struct A_2_12 {
	int a;
	int b;
	int *p;
};
int foo_2_12(int i) {
	struct A_2_12 a;
	if (i || a.a != 'a') {}
	return 0;
}

// Memory
int bar_2_12(int i) {
	struct A_2_12 a;
	if (i || *a.p != 'a') {}
	return 0;
}
================================================================================
3. 过程内类成员变量
--------------------------------------------------------------------------------
3.1 在顺序路径上出现问题
#include <stdlib.h>
class A_3_1 {
public:
    char *p;
};
int foo_3_1() {
    A_3_1 a;
    a.p = (char*)malloc(sizeof(char));
    return 0;
}













class A_3_1 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_1() {
	A_3_1 a;
	a.b = a.a;
	return 0;
}

// Memory
int bar_3_1() {
	A_3_1 a;
	*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
3.2 在简单条件路径上出现问题
#include <stdlib.h>
class A_3_2 {
public:
       char *p;
};
int foo_3_2() {
    A_3_2 a; 
    if (!a.p){
        a.p = (char*)malloc(sizeof(char));
        return 0;
    }
    return 0;
}













class A_3_2 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_2() {
	A_3_2 a;
	if (a.a)
		a.b = a.a;
	return 0;
}

// Memory
int bar_3_2() {
	A_3_2 a;
	if (!a.p)
		*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
3.3 在复合条件路径上出现问题
#include <stdlib.h>
class A_3_3 {
public:
       char *p;
};
int foo_3_3(int i) {
    A_3_3 a;
    if (i || !a.p){
        a.p = (char*)malloc(sizeof(char));
        return 0;
    }
    return 0;
}












class A_3_3 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_3(int i) {
	A_3_3 a;
	if (i || a.a)
		a.b = a.a;
	return 0;
}

// Memory
int bar_3_3(int i) {
	A_3_3 a;
	if (i || !a.p)
		*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
3.4 在组合条件路径上出现问题
#include <stdlib.h>
class A_3_4 {
public:
       char *p;
};
int foo_3_4(int i, int j) {
    A_3_4 a;
    if (i)
       a.p= (char*)malloc(sizeof(char));
    if(j)
         return 0;
    return 0;
}











//#include <stdlib.h>
//class A_3_4 {
//public:
//	char *p;
//};
//A_3_4 a;
//
//// Memory
//int bar_3_4(int i) {
//	a.p = (int *)malloc(sizeof(int) * 10);
//	if (i == 1) {
//		free(a.p);
//		a.p = (int *)malloc(sizeof(int) * 5);
//	}
//	if (i == 2)
//		a.p[5] = 'a';
//	free(a.p);
//	return 0;
//}
--------------------------------------------------------------------------------
3.5 在简单条件判断后出现问题
#include <stdlib.h>
class A_3_5 {
public:
       char *p;
};
int foo_3_5() {
    A_3_5 a;
    if (!a.p) ;
    a.p= (char*)malloc(sizeof(char));
    return 0;
}











class A_3_5 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_5() {
	A_3_5 a;
	if (a.a) {}
	a.b = a.a;
	return 0;
}

// Memory
int bar_3_5() {
	A_3_5 a;
	if (!a.p) {}
	*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
3.6 在复合条件判断后出现问题
#include <stdlib.h>
class A_3_6 {
public:
       char *p;
};
int foo_3_6(int i) {
    A_3_6 a;
    if (i || !a.p) ;
        a.p= (char*)malloc(sizeof(char));
    return 0;
}










class A_3_6 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_6(int i) {
	A_3_6 a;
	if (i || a.a) {}
	a.b = a.a;
	return 0;
}

// Memory
int bar_3_6(int i) {
	A_3_6 a;
	if (i || !a.p) {}
	*a.p = 1;
	return 0;
}
--------------------------------------------------------------------------------
3.7 在简单条件判断前出现问题
#include <stdlib.h>
class A_3_7 {
public:
       char *p;
};
int foo_3_7() {
    A_3_7 a;
    a.p= (char*)malloc(sizeof(char)); 
    return 0;
    if (!a.p) ;
}








class A_3_7 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_7() {
	A_3_7 a;
	a.b = a.a;
	if (a.a) {}
	return 0;
}

// Memory
int bar_3_7() {
	A_3_7 a;
	*a.p = 1;
	if (!a.p) {}
	return 0;
}
--------------------------------------------------------------------------------
3.8 在复合条件判断前出现问题
#include <stdlib.h>
class A_3_8 {
public:
       char *p;
};
int foo_3_8(int i) {
    A_3_8 a;
    a.p= (char*)malloc(sizeof(char));
    return 0; 
    if (i || !a.p) ;
}








class A_3_8 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_8(int i) {
	A_3_8 a;
	a.b = a.a;
	if (i || a.a) {}
	return 0;
}

// Memory
int bar_3_8(int i) {
	A_3_8 a;
	*a.p = 1;
	if (i || !a.p) {}
	return 0;
}
--------------------------------------------------------------------------------
3.9 在单级函数副作用后出现问题
#include <stdlib.h>
class A_3_9 {
public:
       char *p;
};
A_3_9 a;
void fun_3_9() {
     a.p = (char*)malloc(sizeof(char));
}
int foo_3_9() {
    fun_3_9();
    return 0;
}








class A_3_9 {
public:
	int a;
	int b;
	int *p;
};
A_3_9 a;
void f_3_9() {
	a.b = a.a;
}
int bar_3_9(){
	f_3_9();
	return 0;
}

// Memory
void alloc_3_9() {
	*a.p = 1;
}
int foo_3_9() {
	alloc_3_9();
	return 0;
}
--------------------------------------------------------------------------------
3.10 在多级函数副作用后出现问题
#include <stdlib.h>
class A_3_10 {
public:
       char *p;
};
A_3_10 a;
void fun_3_10() {
     a.p = (char*)malloc(sizeof(char));
}
void function_3_10() {
     fun_3_10();
}
int foo_3_10() {
    function_3_10 ();
    return 0;
}









class A_3_10 {
public:
	int a;
	int b;
	int *p;
};
A_3_10 a;
void f_3_10() {
	a.b = a.a;
}
void callF_3_10() {
	f_3_10();
}
int bar_3_10(){
	callF_3_10();
	return 0;
}

// Memory
void alloc_3_10() {
	*a.p = 1;
}
void callAlloc_3_10() {
	alloc_3_10();
}
int foo_3_10() {
	callAlloc_3_10();
	return 0;
}
--------------------------------------------------------------------------------
3.11 在简单条件上出现问题
#include <stdlib.h>
class A_3_11 {
public:
       char *p;
};
int foo_3_11() {
    A_3_11 a;
    a.p = 0;
    if (a.p = (char*)malloc(sizeof(char))) {
       return 0;
        }
    return 0;
}









class A_3_11 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_11() {
	A_3_11 a;
	if (a.a != 'a') {}
	return 0;
}

// Memory
int bar_3_11() {
	A_3_11 a;
	if (*a.p != 'a') {}
	return 0;
}
--------------------------------------------------------------------------------
3.12 在复合条件上出现问题
#include <stdlib.h>
class A_3_12 {
public:
       char *p;
};
int foo_3_12(int i) {
    A_3_12 a;
    a.p = 0;
    if ((i == 1) && (a.p = (char*)malloc(sizeof(char)))) {
       return 0;
        }
    return 0;
}









class A_3_12 {
public:
	int a;
	int b;
	int *p;
};
int foo_3_12(int i) {
	A_3_12 a;
	if (i || a.a != 'a') {}
	return 0;
}

// Memory
int bar_3_12(int i) {
	A_3_12 a;
	if (i || *a.p != 'a') {}
	return 0;
}
================================================================================
4. 过程内数组成员变量
--------------------------------------------------------------------------------
4.1 在顺序路径上出现问题
#include <stdlib.h>
int foo_4_1() {
    char *p[10];
    int i=0;
    for(i=0;i<=9;i++)
        p[i]= (char*)malloc(sizeof(char));
    return 0;
}










int foo_4_1() {
	int a[5], b[5];
	b[0] = a[0];
	return 0;
}

// Memory
int bar_4_1() {
	int *p[5];
	*p[0] = 1;
	return 0;
}
--------------------------------------------------------------------------------
4.2 在简单条件路径上出现问题
#include <stdlib.h>
int foo_4_2() {
    char *p[10];
    if (!p[0])
       p[0] = (char*)malloc(sizeof(char));
    return 0;
}











int foo_4_2() {
	char p[5];
	if (p[0]) {
		p[0] = 'a';
	}
	return 0;
}

// Memory
int bar_4_2() {
	char *p[5];
	if (!p[0]) {
		*p[0] = 'a';
	}
	return 0;
}
--------------------------------------------------------------------------------
4.3 在复合条件路径上出现问题
#include <stdlib.h>
int foo_4_3(int i) {
    char *p[10];
    if (i || !p[0])
       p[0] = (char*)malloc(sizeof(char));
    return 0;
}









int foo_4_3(int i) {
	char p[5];
	if (i || p[0]) {
		p[0] = 'a';
	}
	return 0;
}

// Memory
int bar_4_3(int i) {
	char *p[5];
	if (i || !p[0]) {
		*p[0] = 'a';
	}
	return 0;
}
--------------------------------------------------------------------------------
4.4 在组合条件路径上出现问题
#include <stdlib.h>
int foo_4_4(int i, int j) {
    char* p[10];
    if (i)
    p[0] = 0;
    if(j)
         p[0] = (char*)malloc(sizeof(char));
    return 0;
}










//#include <stdlib.h>
//
//// Memory
//int bar_4_4(int i) {
//	int *p[5];
//	p[0] = (int *)malloc(sizeof(int) * 10);
//	if (i == 1) {
//		free(p[0]);
//		p[0] = (int *)malloc(sizeof(int) * 5);
//	}
//	if (i == 2)
//		p[0][5] = 'a';
//	free(p[0]);
//	return 0;
//}
//
--------------------------------------------------------------------------------
4.5 在简单条件判断后出现问题
#include <stdlib.h>
int foo_4_5() {
    char *p[10];
    if (p[0]) 
       p[0]=0;
    p[0]= (char*)malloc(sizeof(char));
    return 0;
}








int foo_4_5() {
	char p[5];
	if (p[0]) {}
	p[0] = 'a';
	return 0;
}

// Memory
int bar_4_5() {
	char *p[5];
	if (p[0]) {}
	*p[0] = 'a';
	return 0;
}
--------------------------------------------------------------------------------
4.6 在复合条件判断后出现问题
#include <stdlib.h>
int foo_4_6(int i) {
    char *p[10];
    if (i || p[0]) 
       p[0]=0;
    p[0]= (char*)malloc(sizeof(char));
    return 0;
}







int foo_4_6(int i) {
	char p[5];
	if (i || p[0]) {}
	p[0] = 'a';
	return 0;
}

// Memory
int bar_4_6(int i) {
	char *p[5];
	if (i || p[0]) {}
	*p[0] = 'a';
	return 0;
}
--------------------------------------------------------------------------------
4.7 在简单条件判断前出现问题
#include <stdlib.h>
int foo_4_7() {
    char* p[10];
    int i=0;
    for(i=0;i<=9;i++)
        p[i]= (char*)malloc(sizeof(char));
    if (!p[0]) ;
    return 0;
}








int foo_4_7() {
	char p[5];
	p[0] = 'a';
	if (p[0]) {}
	return 0;
}

// Memory
int bar_4_7() {
	char *p[5];
	*p[0] = 'a';
	if (p[0]) {}
	return 0;
}
--------------------------------------------------------------------------------
4.8 在复合条件判断前出现问题
#include <stdlib.h>
int foo_4_8() {
    char* p[10];
    int i=0;
    for(i=0;i<=9;i++)
            p[i]= (char*)malloc(sizeof(char));
    if (i || !p[0]) ;
    return 0;
}




int foo_4_8(int i) {
	char p[5];
	p[0] = 'a';
	if (i || p[0]) {}
	return 0;
}

// Memory
int bar_4_8(int i) {
	char *p[5];
	*p[0] = 'a';
	if (i || p[0]) {}
	return 0;
}
--------------------------------------------------------------------------------
4.9 在单级函数副作用后出现问题
#include <stdlib.h>
char*p[10]={0};
void fun_4_9() {
     p[0] = (char*)malloc(sizeof(char));
}
int foo_4_9() {
    fun_4_9();
    return 0;
}



int b[5], a[5];
void f_4_9() {
	b[0] = a[0];
}
int bar_4_9(){
	f_4_9();
	return 0;
}

// Memory
int *p[5];
void alloc_4_9() {
	*p[0] = 1;
}
int foo_4_9() {
	alloc_4_9();
	return 0;
}
--------------------------------------------------------------------------------
4.10 在多级函数副作用后出现问题
#include <stdlib.h>
char *p[10]={0};
void fun_4_10() {
     p[0] = (char*)malloc(sizeof(char));
}
void function_4_10() {
     fun_4_10();
}
int foo_4_10() {
    function_4_10();
    return 0;
}


int b[5], a[5];
void f_4_10() {
	b[0] = a[0];
}
void callF_4_10() {
	f_4_10();
}
int bar_4_10(){
	callF_4_10();
	return 0;
}

// Memory
int *p[5];
void alloc_4_10() {
	*p[0] = 1;
}
void callAlloc_4_10() {
	alloc_4_10();
}
int foo_4_10() {
	callAlloc_4_10();
	return 0;
}
--------------------------------------------------------------------------------
4.11 在简单条件上出现问题
#include <stdlib.h>
int foo_4_11() {
char *p[10] = {0};
    if (p[0] = (char*)malloc(sizeof(char))) {
            return 0;
        }
    return 0;
}


int foo_4_11() {
	char p[5];
	if (p[0] != 'a') {}
	return 0;
}

// Memory
int bar_4_11() {
	char *p[5];
	if (*p[0] != 'a') {}
	return 0;
}
--------------------------------------------------------------------------------
4.12 在复合条件上出现问题
#include <stdlib.h>
int foo_4_12(int i) {
    char *p[10] = {0};
    if ((i == 1) && (p[0]= (char*)malloc(sizeof(char))) ) {
       return 0;
        }
    return 0;
}



int foo_4_12(int i) {
	char p[5];
	if (i || p[0] != 'a') {}
	return 0;
}

// Memory
int bar_4_12(int i) {
	char *p[5];
	if (i || *p[0] != 'a') {}
	return 0;
}
================================================================================
5. 过程内临时变量
--------------------------------------------------------------------------------
5.1 在顺序路径上出现问题
#include <stdlib.h>
char *foo_5_1() {
    char *p= (char*)malloc(sizeof(char));
    return p;
}
int bar_5_1() {
    char*q=foo_5_1();
    return 0;
}

int *alloc_5_1() {
	char *p;
	return p
}
int foo_5_1() {
	*alloc_5_1();
	return 0;
}
--------------------------------------------------------------------------------
5.2 在简单条件路径上出现问题
#include <stdlib.h>

char *foo_5_2() {
    char *p= (char*)malloc(sizeof(char));
    return p;
}
int bar_5_2(int i) {
    if (i)
       char* q=foo_5_2();
    return 0;
}


int *alloc_5_2() {
	char *p;
	return p
}
int foo_5_2() {
	if (!alloc_5_2())
		*alloc_5_2();
	return 0;
}
--------------------------------------------------------------------------------
5.3 在复合条件路径上出现问题
#include <stdlib.h>

char *foo_5_3() {
    char *p= (char*)malloc(sizeof(char));
    return p;
}
int bar_5_3(int i) {
    if (i ==1 || i == 2)
       char*q=foo_5_3();
       return 0;
}



int *alloc_5_3() {
	char *p;
	return p
}
int foo_5_3(int i) {
	if (!alloc_5_3() || i)
		*alloc_5_3();
	return 0;
}
--------------------------------------------------------------------------------
5.4 在组合条件路径上出现问题
#include <stdlib.h>

char *foo_5_4() {
     char *p= (char*)malloc(sizeof(char));
     return p;

}
int fun_5_4(int argc, char **argv) {
    if (argv[1][0] == 'a')
       if (argv[1][1] == 'b')
          char* q=foo_5_4();
    return 0;
}



int *alloc_5_4() {
	char *p;
	return p
}
int bar_5_4(int i, int j) {
	if (i)
		alloc_5_4();
	if (j)
		*alloc_5_4();
	return 0;
}
--------------------------------------------------------------------------------
5.5 在简单条件判断后出现问题
#include <stdlib.h>

char *foo_5_5() {
     char *p= (char*)malloc(sizeof(char));
     return p;
}
int fun_5_5(int argc, char **argv) {
    if (argv[1][0] == 'a') ;
    char *q=foo_5_5();
    return 0;
}



int *alloc_5_5() {
	char *p;
	return p
}
int foo_5_5() {
	if (alloc_5_5()) {}
	*alloc_5_5();
	return 0;
}
--------------------------------------------------------------------------------
5.6 在复合条件判断后出现问题
#include <stdlib.h>

char *foo_5_6() {
     char *p= (char*)malloc(sizeof(char));
     return p;
}
int fun_5_6(int argc, char **argv) {
    if (argv[1][0] == 'a' && argv[1][1] == 'b') ;
    char *q=foo_5_6();
    return 0;
}




int *alloc_5_6() {
	char *p;
	return p
}
int foo_5_6(int i) {
	if (alloc_5_6() || i) {}
	*alloc_5_6();
	return 0;
}
--------------------------------------------------------------------------------
5.7 在简单条件判断前出现问题
#include <stdlib.h>

char *foo_5_7() {
     char *p= (char*)malloc(sizeof(char));
     return p;

}
int fun_5_7(int argc, char **argv) {
     char* q=foo_5_7();
     return 0;
     if (argv[1][0] == 'a') ;   
}




int *alloc_5_7() {
	char *p;
	return p
}
int foo_5_7() {
	*alloc_5_7();
	if (alloc_5_7()) {}
	return 0;
}
--------------------------------------------------------------------------------
5.8 在复合条件判断前出现问题
#include <stdlib.h>

char *foo_5_8() {
     char *p= (char*)malloc(sizeof(char));
     return p;

}
int fun_5_8(int argc, char **argv) {
    char* q=foo_5_8();
    return 0;
    if (argv[1][0] == 'a' && argv[1][1] == 'b');
}







int *alloc_5_8() {
	char *p;
	return p
}
int foo_5_8(int i) {
	*alloc_5_8();
	if (alloc_5_8() || i) {}
	return 0;
}
--------------------------------------------------------------------------------
5.9 在简单条件上出现问题
#include <stdlib.h>

char *foo_5_9() {
     char *p= (char*)malloc(sizeof(char));
     return p;
}
int fun_5_9(int argc, char **argv) {
    if (*foo_5_9() == 'a') ;
    return 0;
}







int *alloc_5_9() {
	char *p;
	return p
}
int foo_5_9() {
	if (*alloc_5_9()) {}
	return 0;
}
--------------------------------------------------------------------------------
5.10 在复合条件上出现问题
#include <stdlib.h>

char *foo_5_10() {
     char *p= (char*)malloc(sizeof(char));
     return p;
}
int fun_5_10(int argc, char **argv) {
    if (argv[1][0] == 'a' && *foo_5_10() == 'a');
    return 0;
}








int *alloc_5_10() {
	char *p;
	return p
}
int foo_5_10(int i) {
	if (i || *alloc_5_10()) {}
	return 0;
}
================================================================================
6. 过程间单级约束
--------------------------------------------------------------------------------
6.1 约束参数变量
#include <stdlib.h>

void foo_6_1(char *p) {
    p = (char*)malloc(sizeof(char));
}
int bar_6_1(int argc, char **argv) {
    char *p;
    foo_6_1(p);
    return 0;
}





void foo_6_1(int b) {
	int a = b;
}
int bar_6_1() {
	int b;
	foo_6_1(b);
	return 0;
}

// Memory
void fooa_6_1(char *p) {
	*p;
}
int bara_6_1() {
	char *p;
	fooa_6_1(p);
	return 0;
}
--------------------------------------------------------------------------------
6.2 约束简单全局变量
#include <stdlib.h>

char *p_6_2;
void foo_6_2() {
    p_6_2 =(char*)malloc(sizeof(char));
}
int main_6_2(int argc, char **argv) {
    foo_6_2();
    return 0;
}





int b;
void foo_6_2() {
	int a = b;
}
int bar_6_2() {
	foo_6_2();
	return 0;
}

// Memory
char *p;
void fooa_6_2() {
	*p;
}
int bara_6_2() {
	fooa_6_2();
	return 0;
}
--------------------------------------------------------------------------------
6.3 约束结构成员全局变量
#include <stdlib.h>

struct A_6_3 {
    char *p;
};
struct A_6_3 a_6_3;
void foo_6_3() {
    a_6_3.p = (char*)malloc(sizeof(char));
}
int main_6_3(int argc, char **argv) {
    foo_6_3();
    return 0;
}






struct A_6_3 {
	char *p;
	char b;
	char a;
};
struct A_6_3 a;

void fooa_6_3() {
	a.a = a.b;
}
int bara_6_3() {
	fooa_6_3();
	return 0;
}

// Memory
void foo_6_3() {
	*a.p;
}
int bar_6_3() {
	foo_6_3();
	return 0;
}



--------------------------------------------------------------------------------
6.4 约束类成员全局变量
#include <stdlib.h>

class A_6_4 {
public:
    char *p;
};
A_6_4 a_6_4;
void foo_6_4() {
    a_6_4.p = (char*)malloc(sizeof(char));
}
int main_6_4(int argc, char **argv) {
    a_6_4.p = 0;
    foo_6_4();
    return 0;
}





class A_6_4 {
public:
	char *p;
	char b;
	char a;
};
A_6_4 a;

void fooa_6_4() {
	a.a = a.b
}
int bara_6_4() {
	fooa_6_4();
	return 0;
}

// Memory
void foo_6_4() {
	*a.p;
}
int bar_6_4() {
	foo_6_4();
	return 0;
}



--------------------------------------------------------------------------------
6.5 约束数组成员全局变量
#include <stdlib.h>

char *p_6_5[10];
void foo_6_5() {
    p_6_5[0] =(char*)malloc(sizeof(char));
}
int main_6_5(int argc, char **argv) {
foo_6_5();
return 0;
}






int b[5];
void foo_6_5() {
	int a = b[0];
}
int bar_6_5() {
	foo_6_5();
	return 0;
}

// Memory
char *p[5];
void fooa_6_5() {
	*p[0];
}
int bara_6_5() {
	fooa_6_5();
	return 0;
}
================================================================================
7. 过程间多级约束
--------------------------------------------------------------------------------
7.1 约束参数变量
#include <stdlib.h>

void foo_7_1(char *p) {
    p =(char*)malloc(sizeof(char));
}
void bar_7_1(char *p) {
     foo_7_1(p);
}
int main_7_1(int argc, char **argv) {
    char *p = 0;
    bar_7_1(p);
    return 0;
}




void foo_7_1(int b) {
	int a = b;
}
void call_7_1(int b) {
	foo_7_1(b);
}
int bar_7_1() {
	int b;
	call_7_1(b);
	return 0;
}

// Memory
void fooa_7_1(char *p) {
	*p;
}
void call_7_1(char *p) {
	fooa_7_1(p);
}
int bara_7_1() {
	char *p;
	call_7_1(p);
	return 0;
}
--------------------------------------------------------------------------------
7.2 约束简单全局变量
#include <stdlib.h>

char *p_7_2;
void foo_7_2() {
    p_7_2 =(char*)malloc(sizeof(char));
}
void bar_7_2 () {
    foo_7_2 ();
}
int main_7_2 (int argc, char **argv) {
    bar_7_2();
    return 0;
}
int b;
void foo_7_2() {
	int a = b;
}
void call_7_2() {
	foo_7_2();
}
int bar_7_2() {
	call_7_2();
	return 0;
}

// Memory
char *p;
void fooa_7_2() {
	*p;
}
void call_7_2() {
	fooa_7_2();
}
int bara_7_2() {
	call_7_2();
	return 0;
}
--------------------------------------------------------------------------------
7.3 约束结构成员全局变量
#include <stdlib.h>

struct A_7_3 {
    char *p;
};
struct A_7_3 a_7_3;
void foo_7_3() {
    a_7_3.p =(char*)malloc(sizeof(char));
}
void bar_7_3() {
    foo_7_3();
}
int main_7_3(int argc, char **argv) {
    bar_7_3();
    return 0;
}

struct A_7_3 {
	char *p;
	char b;
	char a;
};
struct A_7_3 a;

void fooa_7_3() {
	a.a = a.b
}
void call_7_3() {
	fooa_7_3();
}
int bara_7_3() {
	call_7_3();
	return 0;
}

// Memory
void foo_7_3() {
	*a.p;
}
void call_7_3() {
	foo_7_3();
}
int bar_7_3() {
	call_7_3();
	return 0;
}



--------------------------------------------------------------------------------
7.4 约束类成员全局变量
#include <stdlib.h>

class A_7_4 {
public:
    char *p;
};
A_7_4 a_7_4;
void foo_7_4 () {
    a_7_4.p =(char*)malloc(sizeof(char));
}
void bar_7_4 () {
    foo_7_4 ();
}
int main_7_4(int argc, char **argv) {
    bar_7_4 ();
    return 0;
}
class A_7_4 {
public:
	char *p;
	char b;
	char a;
};
A_7_4 a;

void fooa_7_4() {
	a.a = a.b
}
void call_7_4() {
	fooa_7_4();
}
int bara_7_4() {
	call_7_4();
	return 0;
}

// Memory
void foo_7_4() {
	*a.p;
}
void call_7_4() {
	foo_7_4();
}
int bar_7_4() {
	call_7_4();
	return 0;
}



--------------------------------------------------------------------------------
7.5 约束数组成员全局变量
#include <stdlib.h>

char *p_7_5[10];
void foo_7_5() {
    p_7_5[0] = (char*)malloc(sizeof(char));
}
void bar_7_5() {
    foo_7_5();
}
int main_7_5 (int argc, char **argv) {
    bar_7_5 ();
    return 0;
}

int b[5];
void foo_7_5() {
	int a = b[0];
}
void call_7_5() {
	foo_7_5();
}
int bar_7_5() {
	call_7_5();
	return 0;
}

// Memory
char *p[5];
void fooa_7_5() {
	*p[0];
}
void call_7_5() {
	fooa_7_5();
}
int bara_7_5() {
	call_7_5();
	return 0;
}
================================================================================
8. 过程间缺陷对象
--------------------------------------------------------------------------------
8.1 参数变量
#include <stdlib.h>

void bar_8_1(char *p) {
     p = (char*)malloc(sizeof(char));
}
int main_8_1(int argc, char **argv) {
    bar_8_1(argv[1]);
    return 0;
}

void foo_8_1(int b) {
	int a = b;
}
int bar_8_1() {
	int b;
	foo_8_1(b);
	return 0;
}

// Memory
void fooa_8_1(char *p) {
	*p;
}
int bara_8_1() {
	char *p;
	fooa_8_1(p);
	return 0;
}
--------------------------------------------------------------------------------
8.2 简单全局变量
#include <stdlib.h>

char *p_8_2;
void foo_8_2 (char *p) {
    p_8_2=(char*)malloc(sizeof(char));;
}
void bar_8_2() {
    foo_8_2 (p_8_2);
}
int b;
void foo_8_2(int c) {
	int a = c;
}
int bar_8_2() {
	foo_8_2(b);
	return 0;
}

// Memory
char *p;
void fooa_8_2(char *q) {
	*q;
}
int bara_8_2() {
	fooa_8_2(p);
	return 0;
}
--------------------------------------------------------------------------------
8.3 结构成员全局变量
#include <stdlib.h>

struct A_8_3 {
    char *p;
};
struct A_8_3 a_8_3;
void foo_8_3 (char *p) {
    p=(char*)malloc(sizeof(char));
}
void bar_8_3 () {
     foo_8_3 (a_8_3.p);
}
struct A_8_3 {
	char *p;
	int b;
	int a;
};
struct A_8_3 a;

void fooa_8_3(int b) {
	int a = b;
}
int bara_8_3() {
	fooa_8_3(a.b);
	return 0;
}

// Memory
void foo_8_3(char *p) {
	*p;
}
int bar_8_3() {
	foo_8_3(a.p);
	return 0;
}



--------------------------------------------------------------------------------
8.4 类成员全局变量
#include <stdlib.h>

class A_8_4 {
public:
    char *p;
};
A_8_4 a_8_4;
void foo_8_4 (char *p) {
    p=(char*)malloc(sizeof(char));
}
void bar_8_4 () {
     foo_8_4 (a_8_4.p);
}
class A_8_4 {
public:
	char *p;
	int b;
	int a;
};
A_8_4 a;

void fooa_8_4(int b) {
	int a = b;
}
int bara_8_4() {
	fooa_8_4(a.b);
	return 0;
}

// Memory
void foo_8_4(char *p) {
	*p;
}
int bar_8_4() {
	foo_8_4(a.p);
	return 0;
}



--------------------------------------------------------------------------------
8.5 数组成员全局变量
#include <stdlib.h>

char *a_8_5[10];
void foo_8_5 (char *p) {
    p=(char*)malloc(sizeof(char));
}
void bar_8_5 () {
     foo_8_5 (a_8_5 [0]);
}
int b[5];
void foo_8_5(int c) {
	int a = c;
}
int bar_8_5() {
	foo_8_5(b[0]);
	return 0;
}

// Memory
char *p[5];
void fooa_8_5(char *q) {
	*q;
}
int bara_8_5() {
	fooa_8_5(p[0]);
	return 0;
}
--------------------------------------------------------------------------------
8.6 库函数临时变量
#include <stdlib.h>

void foo_8_6(char *p) {
    p=(char*)malloc(sizeof(char));
}
void bar_8_6 () {
    foo_8_6((char *)malloc(sizeof(char)));
}

//#include <stdlib.h>
//
//// Memory
//void fooa_8_6(char p) {
//}
//void bara_8_6() {
//	fooa_8_6(((char *)malloc(sizeof(char) * 5))[5]);
//}
--------------------------------------------------------------------------------
8.7 自定义函数临时变量
#include <stdlib.h>

void foo_8_7(char *p) {
    p=(char*)malloc(sizeof(char));
}
char *myalloc_8_7() {
    return (char *)malloc(sizeof(char));
}
void bar_8_7() {
    foo_8_7(myalloc_8_7());
}
void foo_8_7(char p) {
	char c = p;
}
char baz_8_7() {
	char p;
	return p;
}
void bar_8_7() {
	fooa_8_7(baz_8_7());
}

// Memory
void fooa_8_7(char p) {
	*p;
}
char *baza_8_7() {
	char *p;
	return p;
}
void bara_8_7(char *p) {
	fooa_8_7(baza_8_7());
}

================================================================================
