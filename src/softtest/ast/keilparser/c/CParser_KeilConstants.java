/* Generated By:JJTree&JavaCC: Do not edit this line. CParser_KeilConstants.java */
package softtest.ast.keilparser.c;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParser_KeilConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PIDENTIFIER = 24;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 30;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 31;
  /** RegularExpression Id. */
  int HEX_LITERAL = 32;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 33;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 34;
  /** RegularExpression Id. */
  int EXPONENT = 35;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 36;
  /** RegularExpression Id. */
  int STRING_LITERAL = 37;
  /** RegularExpression Id. */
  int CODE = 38;
  /** RegularExpression Id. */
  int DATA = 39;
  /** RegularExpression Id. */
  int IDATA = 40;
  /** RegularExpression Id. */
  int BDATA = 41;
  /** RegularExpression Id. */
  int XDATA = 42;
  /** RegularExpression Id. */
  int PDATA = 43;
  /** RegularExpression Id. */
  int SMALL = 44;
  /** RegularExpression Id. */
  int COMPACT = 45;
  /** RegularExpression Id. */
  int LARGE = 46;
  /** RegularExpression Id. */
  int REENTRANT = 47;
  /** RegularExpression Id. */
  int INTERRUPT = 48;
  /** RegularExpression Id. */
  int USING = 49;
  /** RegularExpression Id. */
  int BIT = 50;
  /** RegularExpression Id. */
  int SBIT = 51;
  /** RegularExpression Id. */
  int SFR = 52;
  /** RegularExpression Id. */
  int SFR16 = 53;
  /** RegularExpression Id. */
  int AT = 54;
  /** RegularExpression Id. */
  int ALIEN = 55;
  /** RegularExpression Id. */
  int PRIORITY = 56;
  /** RegularExpression Id. */
  int TASK = 57;
  /** RegularExpression Id. */
  int CONTINUE = 58;
  /** RegularExpression Id. */
  int VOLATILE = 59;
  /** RegularExpression Id. */
  int REGISTER = 60;
  /** RegularExpression Id. */
  int UNSIGNED = 61;
  /** RegularExpression Id. */
  int TYPEDEF = 62;
  /** RegularExpression Id. */
  int DFLT = 63;
  /** RegularExpression Id. */
  int DOUBLE = 64;
  /** RegularExpression Id. */
  int SIZEOF = 65;
  /** RegularExpression Id. */
  int SWITCH = 66;
  /** RegularExpression Id. */
  int RETURN = 67;
  /** RegularExpression Id. */
  int EXTERN = 68;
  /** RegularExpression Id. */
  int STRUCT = 69;
  /** RegularExpression Id. */
  int STATIC = 70;
  /** RegularExpression Id. */
  int SIGNED = 71;
  /** RegularExpression Id. */
  int WHILE = 72;
  /** RegularExpression Id. */
  int BREAK = 73;
  /** RegularExpression Id. */
  int UNION = 74;
  /** RegularExpression Id. */
  int CONST = 75;
  /** RegularExpression Id. */
  int FLOAT = 76;
  /** RegularExpression Id. */
  int SHORT = 77;
  /** RegularExpression Id. */
  int ELSE = 78;
  /** RegularExpression Id. */
  int CASE = 79;
  /** RegularExpression Id. */
  int LONG = 80;
  /** RegularExpression Id. */
  int ENUM = 81;
  /** RegularExpression Id. */
  int AUTO = 82;
  /** RegularExpression Id. */
  int VOID = 83;
  /** RegularExpression Id. */
  int CHAR = 84;
  /** RegularExpression Id. */
  int GOTO = 85;
  /** RegularExpression Id. */
  int FOR = 86;
  /** RegularExpression Id. */
  int INT = 87;
  /** RegularExpression Id. */
  int IF = 88;
  /** RegularExpression Id. */
  int DO = 89;
  /** RegularExpression Id. */
  int SEMICOLON = 90;
  /** RegularExpression Id. */
  int LEFTCURLYBRACKETS = 91;
  /** RegularExpression Id. */
  int RIGHTCURLYBRACKETS = 92;
  /** RegularExpression Id. */
  int COMMA = 93;
  /** RegularExpression Id. */
  int FAR = 94;
  /** RegularExpression Id. */
  int NEAR = 95;
  /** RegularExpression Id. */
  int IDENTIFIER = 96;
  /** RegularExpression Id. */
  int LETTER = 97;
  /** RegularExpression Id. */
  int DIGIT = 98;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ASM_BLOCK = 1;
  /** Lexical state. */
  int PRAGMA_BLOCK = 2;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<token of kind 7>",
    "<token of kind 8>",
    "<token of kind 9>",
    "<token of kind 10>",
    "<token of kind 11>",
    "\"__attribute__((packed))\"",
    "\"__attribute__ ((__const__))\"",
    "\"__attribute__ ((__noreturn__))\"",
    "<token of kind 15>",
    "\"#pragma\"",
    "\"#\"",
    "<token of kind 18>",
    "<token of kind 19>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<PIDENTIFIER>",
    "<token of kind 25>",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 29>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"code\"",
    "\"data\"",
    "\"idata\"",
    "\"bdata\"",
    "\"xdata\"",
    "\"pdata\"",
    "\"small\"",
    "\"compact\"",
    "\"large\"",
    "\"reentrant\"",
    "<INTERRUPT>",
    "\"using\"",
    "\"bit\"",
    "<SBIT>",
    "\"sfr\"",
    "<SFR16>",
    "<AT>",
    "\"alien\"",
    "\"_priority_\"",
    "\"_task_\"",
    "\"continue\"",
    "\"volatile\"",
    "\"register\"",
    "\"unsigned\"",
    "\"typedef\"",
    "\"default\"",
    "\"double\"",
    "\"sizeof\"",
    "\"switch\"",
    "\"return\"",
    "\"extern\"",
    "\"struct\"",
    "\"static\"",
    "\"signed\"",
    "\"while\"",
    "\"break\"",
    "\"union\"",
    "\"const\"",
    "\"float\"",
    "\"short\"",
    "\"else\"",
    "\"case\"",
    "\"long\"",
    "\"enum\"",
    "\"auto\"",
    "\"void\"",
    "\"char\"",
    "\"goto\"",
    "\"for\"",
    "\"int\"",
    "\"if\"",
    "\"do\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"far\"",
    "\"near\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\":\"",
    "\"[\"",
    "\"]\"",
    "\"*\"",
    "\"...\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "\".\"",
    "\"->\"",
  };

}
