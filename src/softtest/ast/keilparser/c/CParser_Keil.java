/* Generated By:JJTree&JavaCC: Do not edit this line. CParser_Keil.java */
package softtest.ast.keilparser.c;

import softtest.ast.c.*;
import java.io.*;
import java.util.Iterator;

  public class CParser_Keil extends CParser/*@bgen(jjtree)*/implements CParser_KeilTreeConstants, CParser_KeilConstants {/*@bgen(jjtree)*/
  protected JJTCParserState jjtree = new JJTCParserState();
  
  public ASTTranslationUnit createAST(java.io.StringReader input) {
                try {
                        CCharStream ccs = new CCharStream(input);
                        CParser parser = new CParser_Keil(ccs);

                        ASTTranslationUnit astcu = parser.TranslationUnit();
                        System.out.println("parsed successfully :) ");
                        return astcu;
                } catch (ParseException pe) {
                        pe.printStackTrace();
                        return null;
                }
        }

        public ASTTranslationUnit parser(String inputfile){
                CParser parser = null;
                ASTTranslationUnit astroot = null;
                try {
                        parser = new CParser_Keil(new CCharStream(new FileInputStream(inputfile)));
                } catch (FileNotFoundException e) {
                        e.printStackTrace();
                }

                try {
                        astroot = parser.TranslationUnit();
                } catch (ParseException e) {
                        e.printStackTrace();
                }
                return astroot;
        }

        void error_skipto(int kind,Exception in_exception) throws  Exception{
                throw in_exception;
        }

        void error_skipto1(int kind,Exception in_exception) {

                //logger.error(in_exception.toString());
                ParseException e = generateParseException();
                StackTraceElement st[] = e.getStackTrace();
                /*for (int i = 0; i < st.length; i++) {
                	logger.error(st[i]);
                }
		*/
                errorMsg.add(e.toString());

                Token t = getNextToken();
                t = getNextToken();
                int flag = 0;
                int bracketNum = 0, cbracketNum = 0;
                if (t.image.equals("(")) {
                        flag = 1;
                        bracketNum = 1;
                } else if (t.image.equals("{")) {
                        flag = 2;
                        cbracketNum = 1;
                }
                if (flag > 0) {
                        while(bracketNum >= 0 ||cbracketNum >=0 ) {
                                t = getNextToken();
                                if (t.image.equals("(")) {
                                        bracketNum++;
                                } else if (t.image.equals(")")) {
                                        bracketNum--;
                                } else if (t.image.equals("{")) {
                                        cbracketNum++;
                                } else if (t.image.equals("}")) {
                                        cbracketNum--;
                                }
                                if (t.kind == CParser_KeilConstants.EOF ||
                                        (cbracketNum <=0 &&(t.kind==CParser_KeilConstants.SEMICOLON || jj_nt.kind == CParser_KeilConstants.RIGHTCURLYBRACKETS))) {
                                        return;
                                }
                        }
                 }

                do {
                        t = getNextToken();
                } while (t.kind!=CParser_KeilConstants.EOF&&t.kind != kind);// The above loop consumes tokens all the way up to a token of

                // "kind".  We use a do-while loop rather than a while because the
                // current token is the one immediately before the erroneous token
                // (in our case the token immediately before what should have been
                // "if"/"while".
        }


        void DeclarationException(Exception ine)throws Exception{
                throw ine;
        }

        void DeclarationException1      (Exception ine){
                //logger.error(ine.toString());
                ParseException e = generateParseException();  // generate the exception object.
                StackTraceElement st[] = e.getStackTrace();
                /*for (int i = 0; i < st.length; i++) {
                        logger.error(st[i]);
        	}*/
        }

    boolean isPointer(){
                Token t1=getToken(1);
                Token t2=getToken(2);
                for(int i=3;i<1024;i++){
                        if(t1.kind== CParser_KeilConstants.IDENTIFIER&&!isType(t1.image)){
                                int count=0;
                                if(t2.image.equals(")")){
                                        count++;
                                        Token t;
                                        for(int j=i;j<1024;j++){
                                                t=getToken(j);
                                                if(t.image.equals(")")){
                                                        count++;
                                                }else{
                                                        break;
                                                }
                                        }

                                        for(int j=i-2;j>0;j--){
                                                t=getToken(j);
                                                if(t.image.equals("*")){
                                                        return true;
                                                }else if(t.image.equals("(")){
                                                        count--;
                                                        if(count==0){
                                                                return false;
                                                        }
                                                }
                                        }
                                }
                                return false;
                        }
                        t1=t2;
                        t2=getToken(i);
                }
                return false;
        }

//keil:when a source c file preprocessed to a .i file which is null, modify this to avoid errors.
  final public ASTTranslationUnit TranslationUnit() throws ParseException {
                                        /*@bgen(jjtree) TranslationUnit */
  ASTTranslationUnit jjtn000 = new ASTTranslationUnit(this, JJTTRANSLATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (jj_2_1(1)) {
          ;
        } else {
          break label_1;
        }
        ExternalDeclaration();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//keil:modify to parse function declarations such as :		fun();
  final public void ExternalDeclaration() throws ParseException {
                              /*@bgen(jjtree) ExternalDeclaration */
  ASTExternalDeclaration jjtn000 = new ASTExternalDeclaration(this, JJTEXTERNALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        if (jj_2_2(2147483647)) {
          FunctionDefinition();
        } else if (jj_2_3(2147483647) && (getToken(1).kind!=CParser_KeilConstants.TYPEDEF&&!isPointer())) {
          FunctionDeclaration();
        } else if (jj_2_4(1)) {
          Declaration();
        } else {
          switch (jj_nt.kind) {
          case PIDENTIFIER:
            PRAGMA();
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
                error_skipto(SEMICOLON,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//KEIL: 

//keil:中断程序调用外部函数时的控制参数对  zys		2010.3.5
  final public void PRAGMA() throws ParseException {
               /*@bgen(jjtree) PRAGMA */
               ASTPRAGMA jjtn000 = new ASTPRAGMA(this, JJTPRAGMA);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      //"#pragma"  (LOOKAHEAD(2) t=<IDENTIFIER> {jjtThis.setPragmaInfo(t.image);})+ {getNextToken()=new Token(83);}
              //"#pragma"  (LOOKAHEAD(2,{getToken(2)!=null}) t=<IDENTIFIER> {jjtThis.setPragmaInfo(t.image);})+
              //"#pragma" 
              t = jj_consume_token(PIDENTIFIER);
                         jjtn000.setPragmaInfo(t.image);
      label_2:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_2;
        }
        t = jj_consume_token(PIDENTIFIER);
                                                                                          jjtn000.setPragmaInfo(t.image);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Interrupt() throws ParseException {
                    /*@bgen(jjtree) Interrupt */
                    ASTInterrupt jjtn000 = new ASTInterrupt(this, JJTINTERRUPT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(INTERRUPT);
      t = jj_consume_token(INTEGER_LITERAL);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                        jjtn000.setInternum(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Using() throws ParseException {
                /*@bgen(jjtree) Using */
                ASTUsing jjtn000 = new ASTUsing(this, JJTUSING);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(USING);
      t = jj_consume_token(INTEGER_LITERAL);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    jjtn000.setUsingnum(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Reentrant() throws ParseException {
                    /*@bgen(jjtree) Reentrant */
  ASTReentrant jjtn000 = new ASTReentrant(this, JJTREENTRANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REENTRANT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Priority() throws ParseException {
                   /*@bgen(jjtree) Priority */
                   ASTPriority jjtn000 = new ASTPriority(this, JJTPRIORITY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(PRIORITY);
      t = jj_consume_token(INTEGER_LITERAL);
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                       jjtn000.setPrioritynum(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Task() throws ParseException {
               /*@bgen(jjtree) Task */
               ASTTask jjtn000 = new ASTTask(this, JJTTASK);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(TASK);
      t = jj_consume_token(INTEGER_LITERAL);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.setTasknum(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MemoryModel() throws ParseException {
                      /*@bgen(jjtree) MemoryModel */
                      ASTMemoryModel jjtn000 = new ASTMemoryModel(this, JJTMEMORYMODEL);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case SMALL:
        t = jj_consume_token(SMALL);
        break;
      case COMPACT:
        t = jj_consume_token(COMPACT);
        break;
      case LARGE:
        t = jj_consume_token(LARGE);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//KEIL: 
  final public void FunctionDefinition() throws ParseException {
                             /*@bgen(jjtree) FunctionDefinition */
  int oldTypeNum = types.size();
  ASTFunctionDefinition jjtn000 = new ASTFunctionDefinition(this, JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2147483647)) {
        switch (jj_nt.kind) {
        case INTERRUPT:
          jj_consume_token(INTERRUPT);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        DeclarationSpecifiers();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case INTERRUPT:
        jj_consume_token(INTERRUPT);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      Declarator();
      switch (jj_nt.kind) {
      case SMALL:
      case COMPACT:
      case LARGE:
        MemoryModel();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case REENTRANT:
        Reentrant();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case INTERRUPT:
        Interrupt();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case USING:
        Using();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case TASK:
        Task();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case PRIORITY:
        Priority();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      if (jj_2_7(1)) {
        DeclarationList();
      } else {
        ;
      }
      CompoundStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
          int newTypeNum = types.size();
			if (newTypeNum > oldTypeNum) {
				for (int i = 0; i < newTypeNum - oldTypeNum; i++) {
					Object o = null;
					Iterator it = types.iterator();
					while (it.hasNext())
						o = it.next();
					types.remove(o);
				}
			}
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//keil:xqing
  final public void FunctionDeclaration() throws ParseException {
                             /*@bgen(jjtree) FunctionDeclaration */
                             ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;boolean flag=false;
    try {
      if (jj_2_8(2147483647)) {
        switch (jj_nt.kind) {
        case INTERRUPT:
          jj_consume_token(INTERRUPT);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        DeclarationSpecifiers();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case 105:
        Pointer();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case INTERRUPT:
        jj_consume_token(INTERRUPT);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                                       jjtn000.setImage(t.image);
        break;
      case 99:
        jj_consume_token(99);
        Declarator();
                                                                                                       flag=true;jjtn000.setOperatorTypeAndFlag("",flag);flag=false;
        jj_consume_token(100);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        if (jj_2_9(3)) {
          jj_consume_token(99);
          ParameterTypeList();
                                                  flag=true;
          jj_consume_token(100);
                                                                  jjtn000.setOperatorTypeAndFlag("(",flag);flag=false;
        } else {
          switch (jj_nt.kind) {
          case 99:
            jj_consume_token(99);
            switch (jj_nt.kind) {
            case IDENTIFIER:
              IdentifierList();
                                    flag=true;
              break;
            default:
              jj_la1[14] = jj_gen;
              ;
            }
            jj_consume_token(100);
                                                       jjtn000.setOperatorTypeAndFlag("(",flag);flag=false;
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch (jj_nt.kind) {
        case 99:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_3;
        }
      }
      switch (jj_nt.kind) {
      case SMALL:
      case COMPACT:
      case LARGE:
        MemoryModel();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case REENTRANT:
        Reentrant();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case INTERRUPT:
        Interrupt();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case USING:
        Using();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case TASK:
        Task();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case PRIORITY:
        Priority();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//keil:
  final public void Declaration() throws ParseException {
                      /*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(this, JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        DeclarationSpecifiers();
        switch (jj_nt.kind) {
        case CODE:
        case DATA:
        case IDATA:
        case BDATA:
        case XDATA:
        case PDATA:
        case AT:
        case ALIEN:
        case VOLATILE:
        case CONST:
        case FAR:
        case NEAR:
        case IDENTIFIER:
        case 99:
        case 105:
          InitDeclaratorList();
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error_skipto(SEMICOLON,e);
      } finally {
                if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){
                        popTypedefParsingStack("Encounter InitDeclaratorList end");
            }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DeclarationList() throws ParseException {
                          /*@bgen(jjtree) DeclarationList */
  ASTDeclarationList jjtn000 = new ASTDeclarationList(this, JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        Declaration();
        if (jj_2_10(1)) {
          ;
        } else {
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DeclarationSpecifiers() throws ParseException {
                                /*@bgen(jjtree) DeclarationSpecifiers */
  ASTDeclarationSpecifiers jjtn000 = new ASTDeclarationSpecifiers(this, JJTDECLARATIONSPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:
        StorageClassSpecifier();
        if (jj_2_11(2147483647)) {
          DeclarationSpecifiers();
        } else {
          ;
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        if (jj_2_14(1)) {
          TypeSpecifier();
          if (jj_2_12(2147483647)) {
            DeclarationSpecifiers();
          } else {
            ;
          }
        } else {
          switch (jj_nt.kind) {
          case CODE:
          case DATA:
          case IDATA:
          case BDATA:
          case XDATA:
          case PDATA:
          case ALIEN:
          case VOLATILE:
          case CONST:
          case FAR:
          case NEAR:
            TypeQualifier();
            if (jj_2_13(2147483647)) {
              DeclarationSpecifiers();
            } else {
              ;
            }
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void StorageClassSpecifier() throws ParseException {
                                /*@bgen(jjtree) StorageClassSpecifier */
                                ASTStorageClassSpecifier jjtn000 = new ASTStorageClassSpecifier(this, JJTSTORAGECLASSSPECIFIER);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case AUTO:
        t = jj_consume_token(AUTO);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setImage(t.image);
        break;
      case REGISTER:
        t = jj_consume_token(REGISTER);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.setImage(t.image);
        break;
      case STATIC:
        t = jj_consume_token(STATIC);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setImage(t.image);
        break;
      case EXTERN:
        t = jj_consume_token(EXTERN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setImage(t.image);
        break;
      case TYPEDEF:
        t = jj_consume_token(TYPEDEF);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setImage(t.image);
                pushTypedefParsingStack(Boolean.TRUE,"Encounter a StorageClassSpecifier");
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//KEIL: add Data Types
  final public void TypeSpecifier() throws ParseException {
                        /*@bgen(jjtree) TypeSpecifier */
  ASTTypeSpecifier jjtn000 = new ASTTypeSpecifier(this, JJTTYPESPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case BIT:
        jj_consume_token(BIT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setImage("bit");
        break;
      case SBIT:
        jj_consume_token(SBIT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setImage("sbit");
        break;
      case SFR:
        jj_consume_token(SFR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setImage("sfr");
        break;
      case SFR16:
        jj_consume_token(SFR16);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setImage("sfr16");
        break;
      case VOID:
        jj_consume_token(VOID);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setImage("void");
        break;
      case CHAR:
        jj_consume_token(CHAR);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setImage("char");
        break;
      case SHORT:
        jj_consume_token(SHORT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setImage("short");
        break;
      case INT:
        jj_consume_token(INT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setImage("int");
        break;
      case LONG:
        jj_consume_token(LONG);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setImage("long");
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setImage("float");
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setImage("double");
        break;
      case SIGNED:
        jj_consume_token(SIGNED);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setImage("signed");
        break;
      case UNSIGNED:
        jj_consume_token(UNSIGNED);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setImage("unsigned");
        break;
      case STRUCT:
      case UNION:
        StructOrUnionSpecifier();
        break;
      case ENUM:
        EnumSpecifier();
        break;
      default:
        jj_la1[27] = jj_gen;
        if (isType(getToken(1).image)) {
          TypedefName();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//KEIL: add Memory Types
  final public void TypeQualifier() throws ParseException {
                        /*@bgen(jjtree) TypeQualifier */
                        ASTTypeQualifier jjtn000 = new ASTTypeQualifier(this, JJTTYPEQUALIFIER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case CONST:
        t = jj_consume_token(CONST);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      case VOLATILE:
        t = jj_consume_token(VOLATILE);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.setImage(t.image);
        break;
      case FAR:
        t = jj_consume_token(FAR);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setImage(t.image);
        break;
      case NEAR:
        t = jj_consume_token(NEAR);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setImage(t.image);
        break;
      case CODE:
        t = jj_consume_token(CODE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setImage(t.image);
        break;
      case DATA:
        t = jj_consume_token(DATA);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      case IDATA:
        t = jj_consume_token(IDATA);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      case BDATA:
        t = jj_consume_token(BDATA);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      case XDATA:
        t = jj_consume_token(XDATA);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      case PDATA:
        t = jj_consume_token(PDATA);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      case ALIEN:
        t = jj_consume_token(ALIEN);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructOrUnionSpecifier() throws ParseException {
                                 /*@bgen(jjtree) StructOrUnionSpecifier */
                                 ASTStructOrUnionSpecifier jjtn000 = new ASTStructOrUnionSpecifier(this, JJTSTRUCTORUNIONSPECIFIER);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
                pushTypedefParsingStack(Boolean.FALSE,"Enter Union&Struct");
      try {
        StructOrUnion();
        if (jj_2_15(3)) {
          switch (jj_nt.kind) {
          case IDENTIFIER:
            t = jj_consume_token(IDENTIFIER);
                                                                jjtn000.setImage(t.image);
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          jj_consume_token(LEFTCURLYBRACKETS);
                        structStack.push(Boolean.TRUE);
          try {
            StructDeclarationList();
          } catch (Exception ex) {
                        DeclarationException(ex);
          } finally {
                        structStack.pop();
          }
          jj_consume_token(RIGHTCURLYBRACKETS);
        } else {
          switch (jj_nt.kind) {
          case IDENTIFIER:
            t = jj_consume_token(IDENTIFIER);
                                                      jjtn000.setImage(t.image);
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
                error_skipto(SEMICOLON,e);
      } finally {
                popTypedefParsingStack("Enter Union&Struct");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructOrUnion() throws ParseException {
                        /*@bgen(jjtree) StructOrUnion */
                        ASTStructOrUnion jjtn000 = new ASTStructOrUnion(this, JJTSTRUCTORUNION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case STRUCT:
        t = jj_consume_token(STRUCT);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setImage(t.image);
        break;
      case UNION:
        t = jj_consume_token(UNION);
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                              jjtn000.setImage(t.image);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructDeclarationList() throws ParseException {
                                /*@bgen(jjtree) StructDeclarationList */
  ASTStructDeclarationList jjtn000 = new ASTStructDeclarationList(this, JJTSTRUCTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        StructDeclaration();
        if (jj_2_16(1)) {
          ;
        } else {
          break label_5;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InitDeclaratorList() throws ParseException {
                             /*@bgen(jjtree) InitDeclaratorList */
  ASTInitDeclaratorList jjtn000 = new ASTInitDeclaratorList(this, JJTINITDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        InitDeclarator();
        label_6:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          InitDeclarator();
        }
      } catch (ParseException e) {
                error_skipto(SEMICOLON,e);
      } finally {

      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Keil:add _at_ declaration
  final public void InitDeclarator() throws ParseException {
                         /*@bgen(jjtree) InitDeclarator */
  ASTInitDeclarator jjtn000 = new ASTInitDeclarator(this, JJTINITDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_17(2147483647)) {
        jj_consume_token(AT);
        Constant();
        Declarator();
      } else if (jj_2_18(2147483647)) {
        jj_consume_token(AT);
        jj_consume_token(99);
        Constant();
        jj_consume_token(100);
        Declarator();
      } else {
        switch (jj_nt.kind) {
        case CODE:
        case DATA:
        case IDATA:
        case BDATA:
        case XDATA:
        case PDATA:
        case ALIEN:
        case VOLATILE:
        case CONST:
        case FAR:
        case NEAR:
        case IDENTIFIER:
        case 99:
        case 105:
          Declarator();
          switch (jj_nt.kind) {
          case AT:
          case 101:
            switch (jj_nt.kind) {
            case 101:
              jj_consume_token(101);
              Initializer();
              break;
            case AT:
              jj_consume_token(AT);
              AssignmentExpression();
              break;
            default:
              jj_la1[33] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructDeclaration() throws ParseException {
                            /*@bgen(jjtree) StructDeclaration */
  ASTStructDeclaration jjtn000 = new ASTStructDeclaration(this, JJTSTRUCTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        SpecifierQualifierList();
        switch (jj_nt.kind) {
        case CODE:
        case DATA:
        case IDATA:
        case BDATA:
        case XDATA:
        case PDATA:
        case ALIEN:
        case VOLATILE:
        case CONST:
        case FAR:
        case NEAR:
        case IDENTIFIER:
        case 99:
        case 102:
        case 105:
          StructDeclaratorList();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error_skipto(SEMICOLON,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SpecifierQualifierList() throws ParseException {
                                 /*@bgen(jjtree) SpecifierQualifierList */
  ASTSpecifierQualifierList jjtn000 = new ASTSpecifierQualifierList(this, JJTSPECIFIERQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_21(1)) {
        TypeSpecifier();
        if (jj_2_19(2147483647)) {
          SpecifierQualifierList();
        } else {
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case CODE:
        case DATA:
        case IDATA:
        case BDATA:
        case XDATA:
        case PDATA:
        case ALIEN:
        case VOLATILE:
        case CONST:
        case FAR:
        case NEAR:
          TypeQualifier();
          if (jj_2_20(2147483647)) {
            SpecifierQualifierList();
          } else {
            ;
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void StructDeclaratorList() throws ParseException {
                               /*@bgen(jjtree) StructDeclaratorList */
  ASTStructDeclaratorList jjtn000 = new ASTStructDeclaratorList(this, JJTSTRUCTDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StructDeclarator();
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        StructDeclarator();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructDeclarator() throws ParseException {
                           /*@bgen(jjtree) StructDeclarator */
  ASTStructDeclarator jjtn000 = new ASTStructDeclarator(this, JJTSTRUCTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_22(2147483647)) {
        switch (jj_nt.kind) {
        case CODE:
        case DATA:
        case IDATA:
        case BDATA:
        case XDATA:
        case PDATA:
        case ALIEN:
        case VOLATILE:
        case CONST:
        case FAR:
        case NEAR:
        case IDENTIFIER:
        case 99:
        case 105:
          Declarator();
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        jj_consume_token(102);
        ConstantExpression();
      } else {
        switch (jj_nt.kind) {
        case CODE:
        case DATA:
        case IDATA:
        case BDATA:
        case XDATA:
        case PDATA:
        case ALIEN:
        case VOLATILE:
        case CONST:
        case FAR:
        case NEAR:
        case IDENTIFIER:
        case 99:
        case 105:
          Declarator();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EnumSpecifier() throws ParseException {
                        /*@bgen(jjtree) EnumSpecifier */
                        ASTEnumSpecifier jjtn000 = new ASTEnumSpecifier(this, JJTENUMSPECIFIER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(ENUM);
      if (jj_2_23(3)) {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                                               jjtn000.setImage(t.image);
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        jj_consume_token(LEFTCURLYBRACKETS);
        EnumeratorList();
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        jj_consume_token(RIGHTCURLYBRACKETS);
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                   jjtc000 = false;
                                                                                                                                                                  jjtn000.setImage(t.image);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EnumeratorList() throws ParseException {
                         /*@bgen(jjtree) EnumeratorList */
  ASTEnumeratorList jjtn000 = new ASTEnumeratorList(this, JJTENUMERATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Enumerator();
      label_8:
      while (true) {
        if (jj_2_24(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        Enumerator();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Enumerator() throws ParseException {
                     /*@bgen(jjtree) Enumerator */
                     ASTEnumerator jjtn000 = new ASTEnumerator(this, JJTENUMERATOR);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.setImage(t.image);
      switch (jj_nt.kind) {
      case 101:
        jj_consume_token(101);
        ConstantExpression();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Declarator() throws ParseException {
                     /*@bgen(jjtree) Declarator */
  ASTDeclarator jjtn000 = new ASTDeclarator(this, JJTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case CODE:
      case DATA:
      case IDATA:
      case BDATA:
      case XDATA:
      case PDATA:
      case ALIEN:
      case VOLATILE:
      case CONST:
      case FAR:
      case NEAR:
        TypeQualifier();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case 105:
        Pointer();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      DirectDeclarator();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DirectDeclarator() throws ParseException {
                           /*@bgen(jjtree) DirectDeclarator */
                            ASTDirectDeclarator jjtn000 = new ASTDirectDeclarator(this, JJTDIRECTDECLARATOR);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;boolean flag=false;
    try {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                jjtn000.setImage(t.image);
                if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){
                        addType(t.image);
                        jjtn000.setIstypedef(true);
                }
        break;
      case 99:
        jj_consume_token(99);
        Declarator();
                            flag=true;jjtn000.setOperatorTypeAndFlag("",flag);flag=false;
        jj_consume_token(100);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          typedefParsingStack.push( Boolean.FALSE );
      label_9:
      while (true) {
        switch (jj_nt.kind) {
        case 99:
        case 103:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_9;
        }
        switch (jj_nt.kind) {
        case 103:
          jj_consume_token(103);
          switch (jj_nt.kind) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case IDENTIFIER:
          case 99:
          case 105:
          case 122:
          case 131:
          case 132:
          case 135:
          case 136:
          case 137:
          case 138:
            ConstantExpression();
                                     flag=true;
            break;
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          jj_consume_token(104);
                                                       jjtn000.setOperatorTypeAndFlag("[",flag);flag=false;
          break;
        default:
          jj_la1[51] = jj_gen;
          if (jj_2_25(3)) {
            jj_consume_token(99);
            ParameterTypeList();
                                               flag=true;
            jj_consume_token(100);
                                                               jjtn000.setOperatorTypeAndFlag("(",flag);flag=false;
          } else {
            switch (jj_nt.kind) {
            case 99:
              jj_consume_token(99);
              switch (jj_nt.kind) {
              case IDENTIFIER:
                IdentifierList();
                                 flag=true;
                break;
              default:
                jj_la1[50] = jj_gen;
                ;
              }
              jj_consume_token(100);
                                                    jjtn000.setOperatorTypeAndFlag("(",flag);flag=false;
              break;
            default:
              jj_la1[52] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          typedefParsingStack.pop();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Pointer() throws ParseException {
                  /*@bgen(jjtree) Pointer */
  ASTPointer jjtn000 = new ASTPointer(this, JJTPOINTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(105);
      switch (jj_nt.kind) {
      case CODE:
      case DATA:
      case IDATA:
      case BDATA:
      case XDATA:
      case PDATA:
      case ALIEN:
      case VOLATILE:
      case CONST:
      case FAR:
      case NEAR:
        TypeQualifierList();
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case 105:
        Pointer();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeQualifierList() throws ParseException {
                            /*@bgen(jjtree) TypeQualifierList */
  ASTTypeQualifierList jjtn000 = new ASTTypeQualifierList(this, JJTTYPEQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        TypeQualifier();
        switch (jj_nt.kind) {
        case CODE:
        case DATA:
        case IDATA:
        case BDATA:
        case XDATA:
        case PDATA:
        case ALIEN:
        case VOLATILE:
        case CONST:
        case FAR:
        case NEAR:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_10;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParameterTypeList() throws ParseException {
                            /*@bgen(jjtree) ParameterTypeList */
  ASTParameterTypeList jjtn000 = new ASTParameterTypeList(this, JJTPARAMETERTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                pushTypedefParsingStack(Boolean.FALSE,"Enter ParameterTypeList");
      try {
        ParameterList();
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          jj_consume_token(106);
                                       jjtn000.setVararg(true);
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
      } catch (Exception e) {
                DeclarationException(e);
      } finally {
                popTypedefParsingStack("Exit ParameterTypeList");
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParameterList() throws ParseException {
                        /*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = new ASTParameterList(this, JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ParameterDeclaration();
      label_11:
      while (true) {
        if (jj_2_26(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(COMMA);
        ParameterDeclaration();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParameterDeclaration() throws ParseException {
                               /*@bgen(jjtree) ParameterDeclaration */
                               ASTParameterDeclaration jjtn000 = new ASTParameterDeclaration(this, JJTPARAMETERDECLARATION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_28(1)) {
        DeclarationSpecifiers();
        if (jj_2_27(2147483647)) {
          Declarator();
        } else {
          switch (jj_nt.kind) {
          case 99:
          case 103:
          case 105:
            AbstractDeclarator();
            break;
          default:
            jj_la1[57] = jj_gen;
            ;
          }
        }
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setIdentifier(t.image);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//todo: not handle this yet
  final public void IdentifierList() throws ParseException {
                         /*@bgen(jjtree) IdentifierList */
                         ASTIdentifierList jjtn000 = new ASTIdentifierList(this, JJTIDENTIFIERLIST);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.addIndentifier(t.image);
      label_12:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(IDENTIFIER);
                                                                                 jjtn000.addIndentifier(t.image);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Initializer() throws ParseException {
                      /*@bgen(jjtree) Initializer */
  ASTInitializer jjtn000 = new ASTInitializer(this, JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case 99:
      case 105:
      case 122:
      case 131:
      case 132:
      case 135:
      case 136:
      case 137:
      case 138:
        AssignmentExpression();
        break;
      case LEFTCURLYBRACKETS:
        jj_consume_token(LEFTCURLYBRACKETS);
        InitializerList();
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        jj_consume_token(RIGHTCURLYBRACKETS);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InitializerList() throws ParseException {
                          /*@bgen(jjtree) InitializerList */
  ASTInitializerList jjtn000 = new ASTInitializerList(this, JJTINITIALIZERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Initializer();
      label_13:
      while (true) {
        if (jj_2_29(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(COMMA);
        Initializer();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeName() throws ParseException {
                   /*@bgen(jjtree) TypeName */
  ASTTypeName jjtn000 = new ASTTypeName(this, JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SpecifierQualifierList();
      switch (jj_nt.kind) {
      case 99:
      case 103:
      case 105:
        AbstractDeclarator();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AbstractDeclarator() throws ParseException {
                             /*@bgen(jjtree) AbstractDeclarator */
  ASTAbstractDeclarator jjtn000 = new ASTAbstractDeclarator(this, JJTABSTRACTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_30(2147483647)) {
        switch (jj_nt.kind) {
        case 105:
          Pointer();
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        DirectAbstractDeclarator();
      } else {
        switch (jj_nt.kind) {
        case 105:
          Pointer();
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DirectAbstractDeclarator() throws ParseException {
                                   /*@bgen(jjtree) DirectAbstractDeclarator */
                                   ASTDirectAbstractDeclarator jjtn000 = new ASTDirectAbstractDeclarator(this, JJTDIRECTABSTRACTDECLARATOR);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);boolean flag=false;
    try {
      if (jj_2_32(2)) {
        jj_consume_token(99);
        AbstractDeclarator();
                                                flag=true;
        jj_consume_token(100);
                                                                jjtn000.setOperatorTypeAndFlag("",flag);flag=false;
      } else {
        switch (jj_nt.kind) {
        case 103:
          jj_consume_token(103);
          switch (jj_nt.kind) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case IDENTIFIER:
          case 99:
          case 105:
          case 122:
          case 131:
          case 132:
          case 135:
          case 136:
          case 137:
          case 138:
            ConstantExpression();
                                                 flag=true;
            break;
          default:
            jj_la1[65] = jj_gen;
            ;
          }
          jj_consume_token(104);
                                                                  jjtn000.setOperatorTypeAndFlag("[",flag);flag=false;
          break;
        case 99:
          jj_consume_token(99);
          if (jj_2_31(1)) {
            ParameterTypeList();
                                                flag=true;
          } else {
            ;
          }
          jj_consume_token(100);
                                                                 jjtn000.setOperatorTypeAndFlag("(",flag);flag=false;
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case 99:
        case 103:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_14;
        }
        switch (jj_nt.kind) {
        case 103:
          jj_consume_token(103);
          switch (jj_nt.kind) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case IDENTIFIER:
          case 99:
          case 105:
          case 122:
          case 131:
          case 132:
          case 135:
          case 136:
          case 137:
          case 138:
            ConstantExpression();
                                        flag=true;
            break;
          default:
            jj_la1[68] = jj_gen;
            ;
          }
          jj_consume_token(104);
                                                         jjtn000.setOperatorTypeAndFlag("[",flag);flag=false;
          break;
        case 99:
          jj_consume_token(99);
          if (jj_2_33(1)) {
            ParameterTypeList();
                                                                                                                                            flag=true;
          } else {
            ;
          }
          jj_consume_token(100);
                                                                                                                                                             jjtn000.setOperatorTypeAndFlag("(",flag);flag=false;
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypedefName() throws ParseException {
                      /*@bgen(jjtree) TypedefName */
                      ASTTypedefName jjtn000 = new ASTTypedefName(this, JJTTYPEDEFNAME);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(this, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        if (jj_2_34(2)) {
          LabeledStatement();
        } else {
          switch (jj_nt.kind) {
          case PIDENTIFIER:
            PRAGMA();
            break;
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case SIZEOF:
          case SEMICOLON:
          case IDENTIFIER:
          case 99:
          case 105:
          case 122:
          case 131:
          case 132:
          case 135:
          case 136:
          case 137:
          case 138:
            ExpressionStatement();
            break;
          case LEFTCURLYBRACKETS:
            CompoundStatement();
            break;
          case SWITCH:
          case IF:
            SelectionStatement();
            break;
          case WHILE:
          case FOR:
          case DO:
            IterationStatement();
            break;
          case CONTINUE:
          case RETURN:
          case BREAK:
          case GOTO:
            JumpStatement();
            break;
          default:
            jj_la1[70] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
                error_skipto(SEMICOLON,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LabeledStatement() throws ParseException {
                           /*@bgen(jjtree) LabeledStatement */
                           ASTLabeledStatement jjtn000 = new ASTLabeledStatement(this, JJTLABELEDSTATEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                         {jjtn000.setImage(t.image);}
        jj_consume_token(102);
        Statement();
        break;
      case CASE:
        t = jj_consume_token(CASE);
                   jjtn000.setImage(t.image);
        ConstantExpression();
        jj_consume_token(102);
        Statement();
        break;
      case DFLT:
        t = jj_consume_token(DFLT);
                   jjtn000.setImage(t.image);
        jj_consume_token(102);
        Statement();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ExpressionStatement() throws ParseException {
                              /*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(this, JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case SIZEOF:
      case IDENTIFIER:
      case 99:
      case 105:
      case 122:
      case 131:
      case 132:
      case 135:
      case 136:
      case 137:
      case 138:
        Expression();
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CompoundStatement() throws ParseException {
                            /*@bgen(jjtree) CompoundStatement */
  ASTCompoundStatement jjtn000 = new ASTCompoundStatement(this, JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTCURLYBRACKETS);
      if (jj_2_35(2147483647)) {
        DeclarationList();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case PIDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case DFLT:
      case SIZEOF:
      case SWITCH:
      case RETURN:
      case WHILE:
      case BREAK:
      case CASE:
      case GOTO:
      case FOR:
      case IF:
      case DO:
      case SEMICOLON:
      case LEFTCURLYBRACKETS:
      case IDENTIFIER:
      case 99:
      case 105:
      case 122:
      case 131:
      case 132:
      case 135:
      case 136:
      case 137:
      case 138:
        StatementList();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTCURLYBRACKETS);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StatementList() throws ParseException {
                        /*@bgen(jjtree) StatementList */
  ASTStatementList jjtn000 = new ASTStatementList(this, JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        label_15:
        while (true) {
          Statement();
          switch (jj_nt.kind) {
          case PIDENTIFIER:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case CONTINUE:
          case DFLT:
          case SIZEOF:
          case SWITCH:
          case RETURN:
          case WHILE:
          case BREAK:
          case CASE:
          case GOTO:
          case FOR:
          case IF:
          case DO:
          case SEMICOLON:
          case LEFTCURLYBRACKETS:
          case IDENTIFIER:
          case 99:
          case 105:
          case 122:
          case 131:
          case 132:
          case 135:
          case 136:
          case 137:
          case 138:
            ;
            break;
          default:
            jj_la1[74] = jj_gen;
            break label_15;
          }
        }
      } catch (ParseException e) {
                error_skipto(SEMICOLON,e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SelectionStatement() throws ParseException {
                             /*@bgen(jjtree) SelectionStatement */
                             ASTSelectionStatement jjtn000 = new ASTSelectionStatement(this, JJTSELECTIONSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case IF:
        t = jj_consume_token(IF);
                 jjtn000.setImage(t.image);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        Statement();
        if (jj_2_36(2)) {
          jj_consume_token(ELSE);
          Statement();
        } else {
          ;
        }
        break;
      case SWITCH:
        t = jj_consume_token(SWITCH);
                     jjtn000.setImage(t.image);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        Statement();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IterationStatement() throws ParseException {
                             /*@bgen(jjtree) IterationStatement */
                             ASTIterationStatement jjtn000 = new ASTIterationStatement(this, JJTITERATIONSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case WHILE:
        t = jj_consume_token(WHILE);
                    jjtn000.setImage(t.image);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        Statement();
        break;
      case DO:
        t = jj_consume_token(DO);
                 jjtn000.setImage(t.image);
        Statement();
        jj_consume_token(WHILE);
        jj_consume_token(99);
        Expression();
        jj_consume_token(100);
        jj_consume_token(SEMICOLON);
        break;
      case FOR:
        t = jj_consume_token(FOR);
                  jjtn000.setImage(t.image);
        jj_consume_token(99);
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case 99:
        case 105:
        case 122:
        case 131:
        case 132:
        case 135:
        case 136:
        case 137:
        case 138:
          Expression();
                                                                  jjtn000.forChild[0]=true;
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case 99:
        case 105:
        case 122:
        case 131:
        case 132:
        case 135:
        case 136:
        case 137:
        case 138:
          Expression();
                                                                                                                          jjtn000.forChild[1]=true;
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case 99:
        case 105:
        case 122:
        case 131:
        case 132:
        case 135:
        case 136:
        case 137:
        case 138:
          Expression();
                                                                                                                                                                                  jjtn000.forChild[2]=true;
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        jj_consume_token(100);
        Statement();
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void JumpStatement() throws ParseException {
                        /*@bgen(jjtree) JumpStatement */
                        ASTJumpStatement jjtn000 = new ASTJumpStatement(this, JJTJUMPSTATEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t,l;
    try {
      switch (jj_nt.kind) {
      case GOTO:
        t = jj_consume_token(GOTO);
                   jjtn000.setImage(t.image);
        l = jj_consume_token(IDENTIFIER);
                                                              jjtn000.setLabel(l.image);
        jj_consume_token(SEMICOLON);
        break;
      case CONTINUE:
        t = jj_consume_token(CONTINUE);
                       jjtn000.setImage(t.image);
        jj_consume_token(SEMICOLON);
        break;
      case BREAK:
        t = jj_consume_token(BREAK);
                    jjtn000.setImage(t.image);
        jj_consume_token(SEMICOLON);
        break;
      case RETURN:
        t = jj_consume_token(RETURN);
                     jjtn000.setImage(t.image);
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case 99:
        case 105:
        case 122:
        case 131:
        case 132:
        case 135:
        case 136:
        case 137:
        case 138:
          Expression();
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignmentExpression();
      label_16:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        AssignmentExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AssignmentExpression() throws ParseException {
                               /*@bgen(jjtree) AssignmentExpression */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(this, JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_37(2147483647)) {
        UnaryExpression();
        AssignmentOperator();
        AssignmentExpression();
      } else if (jj_2_38(3)) {
        ConditionalExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void AssignmentOperator() throws ParseException {
                             /*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(this, JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case 101:
        jj_consume_token(101);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.setOperatorType("=");
        break;
      case 107:
        jj_consume_token(107);
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                     jjtn000.setOperatorType("*=");
        break;
      case 108:
        jj_consume_token(108);
                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                              jjtc000 = false;
                                                                                             jjtn000.setOperatorType("/=");
        break;
      case 109:
        jj_consume_token(109);
                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                       jjtc000 = false;
                                                                                                                                      jjtn000.setOperatorType("%=");
        break;
      case 110:
        jj_consume_token(110);
                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                jjtn000.setOperatorType("+=");
        break;
      case 111:
        jj_consume_token(111);
                                                                                                                                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                          jjtc000 = false;
                                                                                                                                                                                                                         jjtn000.setOperatorType("-=");
        break;
      case 112:
        jj_consume_token(112);
                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                   jjtc000 = false;
                                                                                                                                                                                                                                                                  jjtn000.setOperatorType("<<=");
        break;
      case 113:
        jj_consume_token(113);
                                                                                                                                                                                                                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                               jjtc000 = false;
                                                                                                                                                                                                                                                                                                              jjtn000.setOperatorType(">>=");
        break;
      case 114:
        jj_consume_token(114);
                                                                                                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                         jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                        jjtn000.setOperatorType("&=");
        break;
      case 115:
        jj_consume_token(115);
                                                                                                                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                jjtn000.setOperatorType("^=");
        break;
      case 116:
        jj_consume_token(116);
                                                                                                                                                                                                                                                                                                                                                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                          jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                         jjtn000.setOperatorType("|=");
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ConditionalExpression() throws ParseException {
                                                          /*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalORExpression();
      switch (jj_nt.kind) {
      case 117:
        jj_consume_token(117);
        Expression();
        jj_consume_token(102);
        ConditionalExpression();
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ConstantExpression() throws ParseException {
                             /*@bgen(jjtree) ConstantExpression */
  ASTConstantExpression jjtn000 = new ASTConstantExpression(this, JJTCONSTANTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogicalORExpression() throws ParseException {
                                                      /*@bgen(jjtree) #LogicalORExpression(> 1) */
  ASTLogicalORExpression jjtn000 = new ASTLogicalORExpression(this, JJTLOGICALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalANDExpression();
      label_17:
      while (true) {
        switch (jj_nt.kind) {
        case 118:
          ;
          break;
        default:
          jj_la1[85] = jj_gen;
          break label_17;
        }
        jj_consume_token(118);
                                        jjtn000.setOperatorType("||");
        LogicalANDExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void LogicalANDExpression() throws ParseException {
                                                        /*@bgen(jjtree) #LogicalANDExpression(> 1) */
  ASTLogicalANDExpression jjtn000 = new ASTLogicalANDExpression(this, JJTLOGICALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InclusiveORExpression();
      label_18:
      while (true) {
        switch (jj_nt.kind) {
        case 119:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_18;
        }
        jj_consume_token(119);
                                       jjtn000.setOperatorType("&&");
        InclusiveORExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void InclusiveORExpression() throws ParseException {
                                                          /*@bgen(jjtree) #InclusiveORExpression(> 1) */
  ASTInclusiveORExpression jjtn000 = new ASTInclusiveORExpression(this, JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExclusiveORExpression();
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case 120:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_19;
        }
        jj_consume_token(120);
                                       jjtn000.setOperatorType("|");
        ExclusiveORExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ExclusiveORExpression() throws ParseException {
                                                          /*@bgen(jjtree) #ExclusiveORExpression(> 1) */
  ASTExclusiveORExpression jjtn000 = new ASTExclusiveORExpression(this, JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ANDExpression();
      label_20:
      while (true) {
        switch (jj_nt.kind) {
        case 121:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_20;
        }
        jj_consume_token(121);
                                jjtn000.setOperatorType("^");
        ANDExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ANDExpression() throws ParseException {
                                          /*@bgen(jjtree) #ANDExpression(> 1) */
  ASTANDExpression jjtn000 = new ASTANDExpression(this, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      label_21:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(122);
                                                jjtn000.setOperatorType("&");
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void EqualityExpression() throws ParseException {
                                                    /*@bgen(jjtree) #EqualityExpression(> 1) */
  ASTEqualityExpression jjtn000 = new ASTEqualityExpression(this, JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      label_22:
      while (true) {
        switch (jj_nt.kind) {
        case 123:
        case 124:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_22;
        }
        switch (jj_nt.kind) {
        case 123:
          jj_consume_token(123);
                                         jjtn000.setOperatorType("==");
          break;
        case 124:
          jj_consume_token(124);
                                                                                jjtn000.setOperatorType("!=");
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelationalExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void RelationalExpression() throws ParseException {
                                                        /*@bgen(jjtree) #RelationalExpression(> 1) */
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(this, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      label_23:
      while (true) {
        if (jj_2_40(2)) {
          ;
        } else {
          break label_23;
        }
        switch (jj_nt.kind) {
        case 125:
          jj_consume_token(125);
                                                jjtn000.setOperatorType("<");
          break;
        case 126:
          jj_consume_token(126);
                                                                                       jjtn000.setOperatorType(">");
          break;
        case 127:
          jj_consume_token(127);
                                                                                                                                jjtn000.setOperatorType("<=");
          break;
        case 128:
          jj_consume_token(128);
                                                                                                                                                                        jjtn000.setOperatorType(">=");
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ShiftExpression() throws ParseException {
                                              /*@bgen(jjtree) #ShiftExpression(> 1) */
  ASTShiftExpression jjtn000 = new ASTShiftExpression(this, JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
      label_24:
      while (true) {
        switch (jj_nt.kind) {
        case 129:
        case 130:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_24;
        }
        switch (jj_nt.kind) {
        case 129:
          jj_consume_token(129);
                                       jjtn000.setOperatorType("<<");
          break;
        case 130:
          jj_consume_token(130);
                                                                                 jjtn000.setOperatorType(">>");
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void AdditiveExpression() throws ParseException {
                                                    /*@bgen(jjtree) #AdditiveExpression(> 1) */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(this, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      label_25:
      while (true) {
        if (jj_2_41(2)) {
          ;
        } else {
          break label_25;
        }
        switch (jj_nt.kind) {
        case 131:
          jj_consume_token(131);
                                                        jjtn000.setOperatorType("+");
          break;
        case 132:
          jj_consume_token(132);
                                                                                                jjtn000.setOperatorType("-");
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
                                                                /*@bgen(jjtree) #MultiplicativeExpression(> 1) */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(this, JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastExpression();
      label_26:
      while (true) {
        if (jj_2_42(2)) {
          ;
        } else {
          break label_26;
        }
        switch (jj_nt.kind) {
        case 105:
          jj_consume_token(105);
                                                jjtn000.setOperatorType("*");
          break;
        case 133:
          jj_consume_token(133);
                                                                                      jjtn000.setOperatorType("/");
          break;
        case 134:
          jj_consume_token(134);
                                                                                                                             jjtn000.setOperatorType("%");
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        CastExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void CastExpression() throws ParseException {
                                            /*@bgen(jjtree) #CastExpression(> 1) */
  ASTCastExpression jjtn000 = new ASTCastExpression(this, JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_43(2147483647)) {
        jj_consume_token(99);
        TypeName();
        jj_consume_token(100);
        CastExpression();
      } else {
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case SIZEOF:
        case IDENTIFIER:
        case 99:
        case 105:
        case 122:
        case 131:
        case 132:
        case 135:
        case 136:
        case 137:
        case 138:
          UnaryExpression();
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void UnaryExpression() throws ParseException {
                          /*@bgen(jjtree) UnaryExpression */
                          ASTUnaryExpression jjtn000 = new ASTUnaryExpression(this, JJTUNARYEXPRESSION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_45(3)) {
        PostfixExpression();
      } else {
        switch (jj_nt.kind) {
        case 135:
          jj_consume_token(135);
                 jjtn000.setOperatorType("++");
          UnaryExpression();
          break;
        case 136:
          jj_consume_token(136);
                jjtn000.setOperatorType("--");
          UnaryExpression();
          break;
        case 105:
        case 122:
        case 131:
        case 132:
        case 137:
        case 138:
          UnaryOperator();
          CastExpression();
          break;
        case SIZEOF:
          t = jj_consume_token(SIZEOF);
                     jjtn000.setImage(t.image);
          if (jj_2_44(2147483647)) {
            UnaryExpression();
          } else {
            switch (jj_nt.kind) {
            case 99:
              jj_consume_token(99);
              TypeName();
              jj_consume_token(100);
              break;
            default:
              jj_la1[97] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void UnaryOperator() throws ParseException {
                        /*@bgen(jjtree) UnaryOperator */
  ASTUnaryOperator jjtn000 = new ASTUnaryOperator(this, JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case 122:
        jj_consume_token(122);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setOperatorType("&");
        break;
      case 105:
        jj_consume_token(105);
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                      jjtn000.setOperatorType("*");
        break;
      case 131:
        jj_consume_token(131);
                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                              jjtc000 = false;
                                                                                             jjtn000.setOperatorType("+");
        break;
      case 132:
        jj_consume_token(132);
                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                     jjtc000 = false;
                                                                                                                                    jjtn000.setOperatorType("-");
        break;
      case 137:
        jj_consume_token(137);
                                                                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                            jjtc000 = false;
                                                                                                                                                                           jjtn000.setOperatorType("~");
        break;
      case 138:
        jj_consume_token(138);
                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                    jjtc000 = false;
                                                                                                                                                                                                                   jjtn000.setOperatorType("!");
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FieldId() throws ParseException {
                /*@bgen(jjtree) FieldId */
                ASTFieldId jjtn000 = new ASTFieldId(this, JJTFIELDID);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PostfixExpression() throws ParseException {
                            /*@bgen(jjtree) PostfixExpression */
                            ASTPostfixExpression jjtn000 = new ASTPostfixExpression(this, JJTPOSTFIXEXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);boolean flag=false;
    try {
      PrimaryExpression();
      label_27:
      while (true) {
        switch (jj_nt.kind) {
        case 99:
        case 103:
        case 135:
        case 136:
        case 139:
        case 140:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_27;
        }
        switch (jj_nt.kind) {
        case 103:
          jj_consume_token(103);
          Expression();
                                                jjtn000.setOperatorTypeAndFlag("[",true);
          jj_consume_token(104);
          break;
        case 99:
          jj_consume_token(99);
          if (jj_2_46(2147483647)) {
            ArgumentExpressionList();
                                                                                                   flag=true;
          } else {
            ;
          }
                                                                                                                 jjtn000.setOperatorTypeAndFlag("(",flag);flag=false;
          jj_consume_token(100);
          break;
        case 139:
          jj_consume_token(139);
          FieldId();
                                                                  jjtn000.setOperatorTypeAndFlag(".",true);
          break;
        case 140:
          jj_consume_token(140);
          FieldId();
                                                                  jjtn000.setOperatorTypeAndFlag("->",true);
          break;
        case 135:
          jj_consume_token(135);
                                                         jjtn000.setOperatorTypeAndFlag("++",false);
          break;
        case 136:
          jj_consume_token(136);
                                                         jjtn000.setOperatorTypeAndFlag("--",false);
          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PrimaryExpression() throws ParseException {
                            /*@bgen(jjtree) PrimaryExpression */
                            ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(this, JJTPRIMARYEXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.setImage(t.image);
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Constant();
        break;
      default:
        jj_la1[102] = jj_gen;
        if (jj_2_47(2)) {
          jj_consume_token(99);
          Expression();
          jj_consume_token(100);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ArgumentExpressionList() throws ParseException {
                                 /*@bgen(jjtree) ArgumentExpressionList */
  ASTArgumentExpressionList jjtn000 = new ASTArgumentExpressionList(this, JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignmentExpression();
      label_28:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_28;
        }
        jj_consume_token(COMMA);
        AssignmentExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Constant() throws ParseException {
                   /*@bgen(jjtree) Constant */
                   ASTConstant jjtn000 = new ASTConstant(this, JJTCONSTANT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        label_29:
        while (true) {
          t = jj_consume_token(STRING_LITERAL);
          switch (jj_nt.kind) {
          case STRING_LITERAL:
            ;
            break;
          default:
            jj_la1[104] = jj_gen;
            break label_29;
          }
        }
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(LEFTCURLYBRACKETS)) return true;
    if (jj_3R_297()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTCURLYBRACKETS)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    Token xsp;
    if (jj_3R_267()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(105)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(103)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(LEFTCURLYBRACKETS)) return true;
    if (jj_3R_53()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTCURLYBRACKETS)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) return true;
    }
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_276()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_296()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_173()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) return true;
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_49()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_49()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_277()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    if (jj_3_16()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(LEFTCURLYBRACKETS)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(RIGHTCURLYBRACKETS)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) return true;
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_234()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(ALIEN)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(PDATA)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(XDATA)) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(BDATA)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(IDATA)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(CODE)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(NEAR)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(FAR)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(SFR16)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(SFR)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(SBIT)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(BIT)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_124()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(AUTO)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_173()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_178()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(PIDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(115)) return true;
    return false;
  }

  private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(TASK)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(PRIORITY)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(REENTRANT)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(USING)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(INTERRUPT)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(PIDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(114)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(LEFTCURLYBRACKETS)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind!=CParser_KeilConstants.TYPEDEF&&!isPointer();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(113)) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(138)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(112)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(137)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(111)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(134)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(131)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(110)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(132)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(136)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(135)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(140)) return true;
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(133)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(139)) return true;
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    if (jj_scan_token(37)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(37)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(126)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(109)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(130)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(103)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(104)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(131)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(108)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_200()) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(129)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(136)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(135)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) return true;
    }
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    }
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    return false;
  }

  private boolean jj_3_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(120)) return true;
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(121)) return true;
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(119)) return true;
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_162()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_288()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(107)) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_279()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(102)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_269()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_255()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_203()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_160()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_62()) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(101)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_62()) return true;
    if (jj_3R_63()) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_271()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(LEFTCURLYBRACKETS)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(99)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(103)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(103)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public CParser_KeilTokenManager token_source;
  /** Current token. */
 // public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[106];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x41000000,0x0,0x40000000,0x41000000,0x41000000,0x0,0x40000000,0x40000000,0x40000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x7000,0x10000,0x10000,0x7000,0x8000,0x10000,0x20000,0x2000000,0x1000000,0x10000,0x0,0x10000,0x0,0x0,0x0,0x0,0x7000,0x8000,0x10000,0x20000,0x2000000,0x1000000,0x8c00fc0,0x50000000,0x8800fc0,0x50000000,0x203c0000,0x8800fc0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x8800fc0,0x8800fc0,0x8800fc0,0x0,0x8800fc0,0x8800fc0,0x0,0x0,0x0,0x0,0x8800fc0,0x0,0x0,0x0,0x34,0x0,0x0,0x0,0x8800fc0,0x0,0x8800fc0,0x0,0x0,0x0,0x0,0x0,0x34,0x0,0x0,0x0,0x34,0x0,0x0,0x34,0x0,0x4000034,0x80000000,0x34,0x84000034,0x84000034,0x0,0x34,0x34,0x34,0x0,0x34,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34,0x0,0x0,0x0,0x0,0x0,0x34,0x0,0x20,0x34,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000800,0x40050,0xc0000800,0x40050,0x9b34a1,0xc0000800,0x0,0x0,0x420,0x20000000,0x0,0x0,0xc0000800,0xc0000800,0xc0000800,0x20000000,0xc0000800,0xc0000800,0x0,0x20000000,0x0,0x0,0xc0000800,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0xc0000800,0x0,0xc0000800,0x20000000,0x0,0x0,0x20000000,0x20000000,0x8000002,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0xf60030e,0x8000,0x2,0xf60830e,0xf60830e,0x1000004,0x2,0x2,0x2,0x2400100,0x2,0x200208,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x9,0x1,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x209,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x20,0x20,0x209,0x249,0x0,0x0,0x209,0x209,0x1,0x0,0x1,0x20,0x0,0x200,0x9,0x88,0x4000209,0x1,0x80,0x8,0x0,0x200,0x0,0x0,0x288,0x1,0x0,0x0,0x4000209,0x288,0x200,0x200,0x4000209,0x88,0x88,0x4000209,0x88,0x4000209,0x1,0x4000209,0x4000209,0x4000209,0x0,0x4000209,0x4000209,0x4000209,0x0,0x4000209,0x0,0x0,0x1ff820,0x200000,0x400000,0x800000,0x1000000,0x2000000,0x18000000,0x18000000,0xe0000000,0x0,0x0,0x0,0x200,0x4000209,0x8,0x4000200,0x4000200,0x88,0x88,0x1,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x798,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x798,0x0,0x0,0x0,0x798,0x0,0x0,0x798,0x0,0x798,0x0,0x798,0x798,0x798,0x0,0x798,0x798,0x798,0x0,0x798,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x6,0x6,0x18,0x60,0x798,0x0,0x798,0x618,0x1980,0x1980,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[47];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public CParser_Keil(CharStream stream) {
    token_source = new CParser_KeilTokenManager(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_lookingAhead = false;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CParser_Keil(CParser_KeilTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CParser_KeilTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[141];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 106; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 141; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 47; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
