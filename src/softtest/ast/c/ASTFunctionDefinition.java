/* Generated By:JJTree: Do not edit this line. ASTFunctionDefinition.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package softtest.ast.c;

import softtest.cfg.c.Graph;
import softtest.symboltable.c.MethodNameDeclaration;
import softtest.symboltable.c.Type.CType;

public class ASTFunctionDefinition extends SimpleNode {
	@Override
	public boolean equals(Object obj) {
		if(!(obj instanceof ASTFunctionDefinition))
			return false;
		ASTFunctionDefinition other=(ASTFunctionDefinition)obj;
		
		return this.getImage().equals(other.getImage());
	}

	Graph graph;
	
	MethodNameDeclaration decl;
	
	public boolean EXIT = false;
	
	public MethodNameDeclaration getDecl() {
		return decl;
	}

	@Override
	public String toString() {
		
		return super.toString();//+":"+getImage()+" type:"+getType();
	}

	public void setDecl(MethodNameDeclaration decl) {
		this.decl = decl;
	}
	
	CType type = null;

	public CType getType() {
		return type;
	}

	

	public void setType(CType type) {
		this.type = type;
	}

	public ASTFunctionDefinition(int id) {
		super(id);
	}

	public ASTFunctionDefinition(CParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(CParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	@Override
	public String getImage() {
		if(image.equals("")){
			SimpleNode child=(SimpleNode)this.getFirstDirectChildOfType(ASTDeclarator.class);
			if(child!=null){
				image=child.getImage();
			}
		}
		return image;
	}

	public Graph getGraph() {
		return graph;
	}

	public void setGraph(Graph graph) {
		this.graph = graph;
	}
	
	public int getParameterCount() {
		if(jjtGetChild(0) instanceof ASTDeclarationSpecifiers)
		{
			ASTDeclarator declarator=(ASTDeclarator)jjtGetChild(1);
			ASTParameterList paras=(ASTParameterList)(declarator.getFirstChildOfType(ASTParameterList.class));
			if(paras!=null)
				return paras.jjtGetNumChildren();
			return 0;
		}else
			return jjtGetChild(0).jjtGetNumChildren();
    }
}
/* JavaCC - OriginalChecksum=91e97d1918352583ba68856322e93bdb (do not edit this line) */
