/* Generated By:JJTree: Do not edit this line. ASTUnaryExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package softtest.ast.c;

import softtest.symboltable.c.NameDeclaration;
import softtest.symboltable.c.Scope;
import softtest.symboltable.c.Search;
import softtest.symboltable.c.VariableNameDeclaration;

public
class ASTUnaryExpression extends AbstractExpression {
   
	 NameDeclaration decl=null;
		
	public NameDeclaration getDecl() {
		return decl;
	}

	public void setDecl(NameDeclaration decl) {
		this.decl = decl;
	}
		
	
	//多级指针的成员声明
	//add by zhouhb
	//2011.5.18
	public VariableNameDeclaration getVariableDecl() {
		VariableNameDeclaration ret = null;
		if (!image.equals("")) {
			Scope scope = getScope();
			NameDeclaration decl = Search.searchInVariableUpward(image, scope);
			if (decl instanceof VariableNameDeclaration) {
				ret = (VariableNameDeclaration) decl;
			}
		}
		return ret;
	}
	//end by zhouhb
	
	public ASTUnaryExpression(int id) {
    super(id);
  }

  public ASTUnaryExpression(CParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(CParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=91cfc4f192e5cd62cdf589ee001748df (do not edit this line) */
