/* Generated By:JJTree: Do not edit this line. ASTDeclarator.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package softtest.ast.c;

import java.util.ArrayList;

import softtest.symboltable.c.VariableNameDeclaration;
import softtest.symboltable.c.Type.CType;

public class ASTDeclarator extends SimpleNode {
	
	//add by zhouhb
	//2011.5.5
	//由于结构体声明时对其每个成员也进行声明，所以此处需添加一个声明列表
	public ArrayList<VariableNameDeclaration> decl=new ArrayList<VariableNameDeclaration>();
		
	public ArrayList<VariableNameDeclaration> getDeclList() {
		return decl;
	}

	public void setDeclList(ArrayList<VariableNameDeclaration> decl) {
		this.decl = decl;
	}
	//end by zhouh
	
	CType type = null;

	public ASTDeclarator(int id) {
		super(id);
	}

	public CType getType() {
		return type;
	}

	public void setType(CType type) {
		this.type = type;
	}

	public ASTDeclarator(CParser p, int id) {
		super(p, id);
	}

	@Override
	public String getImage() {
		if(image.equals("")){
			SimpleNode child=(SimpleNode)this.getFirstDirectChildOfType(ASTDirectDeclarator.class);
			if(child!=null){
				image=child.getImage();
			}
		}
		return image;
	}
	
	public ASTDirectDeclarator getFinalDirectDeclarator(){
		ASTDeclarator declarator=this;
		ASTDirectDeclarator de=(ASTDirectDeclarator)declarator.getFirstDirectChildOfType(ASTDirectDeclarator.class);
		if(de==null){
			throw new RuntimeException("AST tree error,Declarator must have a DirectDeclarator!");
		}
		declarator = (ASTDeclarator) de.getFirstDirectChildOfType(ASTDeclarator.class);
		while (declarator != null) {
			de=(ASTDirectDeclarator)declarator.getFirstDirectChildOfType(ASTDirectDeclarator.class);
			if(de==null){
				throw new RuntimeException("AST tree error,Declarator must have a DirectDeclarator!");
			}
			declarator = (ASTDeclarator) de.getFirstDirectChildOfType(ASTDeclarator.class);
		}
		return de;
	}

	/** Accept the visitor. **/
	public Object jjtAccept(CParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
/* JavaCC - OriginalChecksum=b217bf2396253ce65c5e39c02915b8b3 (do not edit this line) */
