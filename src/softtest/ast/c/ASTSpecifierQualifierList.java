/* Generated By:JJTree: Do not edit this line. ASTSpecifierQualifierList.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package softtest.ast.c;

import java.util.*;

import softtest.symboltable.c.Type.CType;

public class ASTSpecifierQualifierList extends SimpleNode {
	CType type = null;

	boolean typehandled = false;

	public boolean isTypehandled() {
		return typehandled;
	}

	public void setTypehandled(boolean typehandled) {
		this.typehandled = typehandled;
	}

	public ASTSpecifierQualifierList(int id) {
		super(id);
	}

	public ASTSpecifierQualifierList(CParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(CParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	
	public CType getType() {
		return type;
	}

	public void setType(CType type) {
		this.type = type;
	}
	
	public List<ASTSpecifierQualifierList> findAllNestSpecifierQualifierList(){
		List<ASTSpecifierQualifierList> list =new ArrayList<ASTSpecifierQualifierList>();
		ASTSpecifierQualifierList node=this;
		list.add(this);
		while(node.jjtGetNumChildren()==2&&node.jjtGetChild(1) instanceof ASTSpecifierQualifierList){
			node = (ASTSpecifierQualifierList)node.jjtGetChild(1);
			list.add(node);
		}
		return list;
	}
	

	
	public List<ASTTypeSpecifier> findAllNestTypeSpecifier(){
		List<ASTTypeSpecifier> list =new ArrayList<ASTTypeSpecifier>();
		ASTSpecifierQualifierList node=this;
		if(node.jjtGetChild(0) instanceof ASTTypeSpecifier){
			list.add((ASTTypeSpecifier)node.jjtGetChild(0));
		}
		while(node.jjtGetNumChildren()==2&&node.jjtGetChild(1) instanceof ASTSpecifierQualifierList){
			node = (ASTSpecifierQualifierList)node.jjtGetChild(1);
			if(node.jjtGetChild(0) instanceof ASTTypeSpecifier){
				list.add((ASTTypeSpecifier)node.jjtGetChild(0));
			}
		}
		return list;	
	}
	
	
	public List<ASTTypeQualifier> findAllNestTypeQualifier(){
		List<ASTTypeQualifier> list =new ArrayList<ASTTypeQualifier>();
		ASTSpecifierQualifierList node=this;
		if(node.jjtGetChild(0) instanceof ASTTypeQualifier){
			list.add((ASTTypeQualifier)node.jjtGetChild(0));
		}
		while(node.jjtGetNumChildren()==2&&node.jjtGetChild(1) instanceof ASTSpecifierQualifierList){
			node = (ASTSpecifierQualifierList)node.jjtGetChild(1);
			if(node.jjtGetChild(0) instanceof ASTTypeQualifier){
				list.add((ASTTypeQualifier)node.jjtGetChild(0));
			}
		}
		return list;	
	}
}
/* JavaCC - OriginalChecksum=0a75a4b4b0462399345abd5105073880 (do not edit this line) */
