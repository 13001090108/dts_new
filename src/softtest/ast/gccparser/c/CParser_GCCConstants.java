/* Generated By:JJTree&JavaCC: Do not edit this line. CParser_GCCConstants.java */
package softtest.ast.gccparser.c;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParser_GCCConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMPLEX_LITERAL = 62;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 63;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 64;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL_UL = 65;
  /** RegularExpression Id. */
  int HEX_LITERAL = 66;
  /** RegularExpression Id. */
  int HEX_LITERAL_LLU = 67;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 68;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 69;
  /** RegularExpression Id. */
  int HEX_FLOATING_POINT_LITERAL = 70;
  /** RegularExpression Id. */
  int EXPONENT = 71;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 72;
  /** RegularExpression Id. */
  int STRING_LITERAL = 73;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 74;
  /** RegularExpression Id. */
  int BOOL = 75;
  /** RegularExpression Id. */
  int THREAD = 76;
  /** RegularExpression Id. */
  int FUNC = 77;
  /** RegularExpression Id. */
  int FUNC1 = 78;
  /** RegularExpression Id. */
  int FUNC2 = 79;
  /** RegularExpression Id. */
  int ALIGNOF = 80;
  /** RegularExpression Id. */
  int COMPLEX = 81;
  /** RegularExpression Id. */
  int OLDCOMPLEX = 82;
  /** RegularExpression Id. */
  int REAL = 83;
  /** RegularExpression Id. */
  int IMAG = 84;
  /** RegularExpression Id. */
  int TYPEOF = 85;
  /** RegularExpression Id. */
  int OLDTYPEOF = 86;
  /** RegularExpression Id. */
  int LABEL = 87;
  /** RegularExpression Id. */
  int CONTINUE = 88;
  /** RegularExpression Id. */
  int VOLATILE = 89;
  /** RegularExpression Id. */
  int REGISTER = 90;
  /** RegularExpression Id. */
  int UNSIGNED = 91;
  /** RegularExpression Id. */
  int TYPEDEF = 92;
  /** RegularExpression Id. */
  int DFLT = 93;
  /** RegularExpression Id. */
  int DOUBLE = 94;
  /** RegularExpression Id. */
  int SIZEOF = 95;
  /** RegularExpression Id. */
  int SWITCH = 96;
  /** RegularExpression Id. */
  int RETURN = 97;
  /** RegularExpression Id. */
  int EXTERN = 98;
  /** RegularExpression Id. */
  int STRUCT = 99;
  /** RegularExpression Id. */
  int STATIC = 100;
  /** RegularExpression Id. */
  int SIGNED = 101;
  /** RegularExpression Id. */
  int WHILE = 102;
  /** RegularExpression Id. */
  int BREAK = 103;
  /** RegularExpression Id. */
  int UNION = 104;
  /** RegularExpression Id. */
  int CONST = 105;
  /** RegularExpression Id. */
  int FLOAT = 106;
  /** RegularExpression Id. */
  int FLOAT80 = 107;
  /** RegularExpression Id. */
  int FLOAT128 = 108;
  /** RegularExpression Id. */
  int DECIMALFLOAT = 109;
  /** RegularExpression Id. */
  int DECIMALFLOAT64 = 110;
  /** RegularExpression Id. */
  int DECIMALFLOAT128 = 111;
  /** RegularExpression Id. */
  int SHORT = 112;
  /** RegularExpression Id. */
  int ELSE = 113;
  /** RegularExpression Id. */
  int CASE = 114;
  /** RegularExpression Id. */
  int LONG = 115;
  /** RegularExpression Id. */
  int ENUM = 116;
  /** RegularExpression Id. */
  int AUTO = 117;
  /** RegularExpression Id. */
  int VOID = 118;
  /** RegularExpression Id. */
  int CHAR = 119;
  /** RegularExpression Id. */
  int GOTO = 120;
  /** RegularExpression Id. */
  int FOR = 121;
  /** RegularExpression Id. */
  int INT = 122;
  /** RegularExpression Id. */
  int IF = 123;
  /** RegularExpression Id. */
  int DO = 124;
  /** RegularExpression Id. */
  int SEMICOLON = 125;
  /** RegularExpression Id. */
  int LEFTCURLYBRACKETS = 126;
  /** RegularExpression Id. */
  int RIGHTCURLYBRACKETS = 127;
  /** RegularExpression Id. */
  int LEFTBRACKET = 128;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 129;
  /** RegularExpression Id. */
  int COMMA = 130;
  /** RegularExpression Id. */
  int EQUAL = 131;
  /** RegularExpression Id. */
  int FAR = 132;
  /** RegularExpression Id. */
  int NEAR = 133;
  /** RegularExpression Id. */
  int IDENTIFIER = 134;
  /** RegularExpression Id. */
  int LETTER = 135;
  /** RegularExpression Id. */
  int DIGIT = 136;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<token of kind 7>",
    "<token of kind 8>",
    "<token of kind 9>",
    "<token of kind 10>",
    "<token of kind 11>",
    "\"__based(x)\"",
    "\"_based(x)\"",
    "\"__cdecl\"",
    "\"_cdecl\"",
    "\"__fastcall\"",
    "\"_fastcall\"",
    "\"__stdcall\"",
    "\"_stdcall\"",
    "\"__declspec(x)\"",
    "\"_declspec(x)\"",
    "\"__assume(x)\"",
    "\"_assume(x)\"",
    "\"__multiple_inheritance\"",
    "\"_multiple_inheritance\"",
    "\"__single_inheritance\"",
    "\"_single_inheritance\"",
    "\"__virtual_inheritance\"",
    "\"_virtual_inheritance\"",
    "\"__leave\"",
    "\"_leave\"",
    "\"__inline\"",
    "\"_inline\"",
    "\"__inline__\"",
    "\"inline\"",
    "\"__forceinline\"",
    "\"_forceinline\"",
    "\"__ptr64\"",
    "\"__DJ_wint_t\"",
    "\"__attribute__(x)\"",
    "\"__asm__(x)\"",
    "\"__extension__\"",
    "\"NONAMELESSUNION\"",
    "\"NONAMELESSSTRUCT\"",
    "\"__MINGW_ATTRIB_NORETURN\"",
    "\"__MINGW_ATTRIB_CONST\"",
    "\"__MINGW_ATTRIB_MALLOC\"",
    "\"__MINGW_ATTRIB_PURE\"",
    "\"__CRT_INLINE\"",
    "\"__MINGW_IMPORT\"",
    "\"__MINGW_NOTHROW\"",
    "\"PACKED\"",
    "<token of kind 53>",
    "\"#\"",
    "\"__restrict__\"",
    "\"__restrict\"",
    "\"restrict\"",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 61>",
    "<COMPLEX_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<DECIMAL_LITERAL_UL>",
    "<HEX_LITERAL>",
    "<HEX_LITERAL_LLU>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<HEX_FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<BINARY_LITERAL>",
    "\"_Bool\"",
    "\"__thread\"",
    "<FUNC>",
    "\"__FUNCTION__\"",
    "\"__PRETTY_FUNCTION__\"",
    "<ALIGNOF>",
    "<COMPLEX>",
    "\"__complex__\"",
    "<REAL>",
    "<IMAG>",
    "<TYPEOF>",
    "\"__typeof__\"",
    "\"__label__\"",
    "\"continue\"",
    "<VOLATILE>",
    "\"register\"",
    "\"unsigned\"",
    "\"typedef\"",
    "\"default\"",
    "\"double\"",
    "\"sizeof\"",
    "\"switch\"",
    "\"return\"",
    "\"extern\"",
    "\"struct\"",
    "\"static\"",
    "<SIGNED>",
    "\"while\"",
    "\"break\"",
    "\"union\"",
    "<CONST>",
    "<FLOAT>",
    "\"__float80\"",
    "\"__float128\"",
    "<DECIMALFLOAT>",
    "\"_Decimal64\"",
    "\"_Decimal128\"",
    "\"short\"",
    "\"else\"",
    "\"case\"",
    "\"long\"",
    "\"enum\"",
    "\"auto\"",
    "\"void\"",
    "<CHAR>",
    "\"goto\"",
    "\"for\"",
    "<INT>",
    "\"if\"",
    "\"do\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"=\"",
    "<FAR>",
    "<NEAR>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"*\"",
    "\"...\"",
    "\".\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "\"->\"",
  };

}
