/*

  C grammar defintion for use with JavaCC
  Contributed by Doug South (dsouth@squirrel.com.au) 21/3/97

  This parser assumes that the C source file has been preprocessed : all
  #includes have been included and all macros have been expanded. I accomplish
  this with "gcc -P -E <source file> > <output file>".

  There is a problem with compiler specific types, such as __signed, __const,
  __inline__, etc. These types can be added as typedef types before the parser
  is run on a file. See main() for an example. I have also found a strange little
  compiler specific "type" if you can call it that. It is __attribute__, but it
  does not seem to be used as a type. I found that just deleting the __attribute__
  and the following "offensive" code works.

  This grammar also prints out all the types defined while parsing the file. This
  is done via a call to printTypes() when the parser is complete. If you do not want
  this, just comment out the printTypes() method call in the production rule
  TranslationUnit(), which BTW is the root node for parsing a C source file.

  I have not in anyway extensively tested this grammar, in fact it is barely tested,
  but I imagine it is better to have a starting point for a C grammar other than from
  scratch. It has not been optimized in anyway, my main aim was to get a parser that
  works. Lookahead may not be optimum at choice points and may even be insufficient at
  times. I choose to err on the side of not optimum if I made a choice at all.

  If you use this grammar, I would appreciate hearing from you. I will try to maintain
  this grammar to the best of my ability, but at this point in time, this is only a side
  hobby (unless someone wants to pay me for doing JavaCC work!). In that regards, I am
  interested in hearing bugs and comments.

  TODO:

    Insert the appropriate code to enable C source trees from this grammar.

=============================================
3/2/06: Modified by Tom Copeland
- STRING_LITERAL now handles embedded escaped newlines, thanks to J.Chris Findlay for the patch
- Works with JavaCC 4.0
- Preprocessor directives are now simply SKIP'd, so no need to run C files through GCC first

  */
options {
  BUILD_PARSER=true;
  JAVA_UNICODE_ESCAPE = true;
  CACHE_TOKENS = true;
  STATIC = false;
  USER_CHAR_STREAM = true;
  
  MULTI = true;
  VISITOR = true;
  
  TRACK_TOKENS = false;
  
  NODE_USES_PARSER = true;
  OUTPUT_DIRECTORY = "gcc";
  
  NODE_PACKAGE="softtest.ast.gccparser.c";
}

PARSER_BEGIN(CParser_GCC)

package softtest.ast.gccparser.c;

import softtest.ast.c.*;
import java.io.*;

public class CParser_GCC extends CParser {
	public ASTTranslationUnit createAST(java.io.StringReader input) {
        try {
			CCharStream ccs = new CCharStream(input);
			CParser parser = new CParser_GCC(ccs);
			ASTTranslationUnit astcu = parser.TranslationUnit();
			System.out.println("parsed successfully :) ");
			return astcu;
		} catch (ParseException pe) {
			pe.printStackTrace();
			return null;
		}
	}

	public ASTTranslationUnit parser(String inputfile){
		CParser parser = null;
		ASTTranslationUnit astroot = null;
		try {
			parser = new CParser_GCC(new CCharStream(new FileInputStream(inputfile)));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		try {
			astroot = parser.TranslationUnit();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return astroot;
	}

	void error_skipto(int kind,Exception in_exception) throws Exception{
		throw in_exception;
	}
		
	void error_skipto1(int kind,Exception in_exception) {
		//logger.error(in_exception.toString());
		ParseException e = generateParseException();
		StackTraceElement st[] = e.getStackTrace();
		/*for (int i = 0; i < st.length; i++) {
			logger.error(st[i]);
		}
		*/
		errorMsg.add(e.toString());

		Token t = getNextToken();
		t = getNextToken();
		int flag = 0;
		int bracketNum = 0, cbracketNum = 0;
		if (t.image.equals("(")) {
			flag = 1;
			bracketNum = 1;
		}else if(t.image.equals("{")) {
			flag = 2;
			cbracketNum = 1;
		}
		if (flag > 0) {
			while(bracketNum >= 0 ||cbracketNum >=0 ) {
				t = getNextToken();
				if (t.image.equals("(")) {
					bracketNum++;
				} else if (t.image.equals(")")) {
                			bracketNum--;
				} else if (t.image.equals("{")) {
					cbracketNum++;
				} else if (t.image.equals("}")) {
					cbracketNum--;
				}
				if (t.kind == CParser_GCCConstants.EOF || 
					(cbracketNum <=0 &&(t.kind==CParser_GCCConstants.SEMICOLON || jj_nt.kind == CParser_GCCConstants.RIGHTCURLYBRACKETS))) {
					return;
				}        
			}
		}

		do {
			t = getNextToken();
		} while (t.kind!=CParser_GCCConstants.EOF&&t.kind != kind);// The above loop consumes tokens all the way up to a token of

		// "kind".  We use a do-while loop rather than a while because the
		// current token is the one immediately before the erroneous token
		// (in our case the token immediately before what should have been
		// "if"/"while".
	}

	void DeclarationException(Exception ine){
		//logger.error(ine.toString());
		ParseException e = generateParseException();  // generate the exception object.
		StackTraceElement st[] = e.getStackTrace();
		/*for (int i = 0; i < st.length; i++) {
			logger.error(st[i]);
		}*/
	}
	
    boolean isPointer(){
		Token t1=getToken(1);
		Token t2=getToken(2);
		for(int i=3;i<1024;i++){
			if(t1.kind== CParser_GCCConstants.IDENTIFIER&&!isType(t1.image)){
				int count=0;
				if(t2.image.equals(")")){
					count++;
					Token t;
					for(int j=i;j<1024;j++){
						t=getToken(j);
						if(t.image.equals(")")){
							count++;
						}else{
							break;
						}
					}
					
					for(int j=i-2;j>0;j--){
						t=getToken(j);
						if(t.image.equals("*")){
							return true;
						}else if(t.image.equals("(")){
							count--;
							if(count==0){
								return false;
							}
						}
					}
				}
				return false;
			}
			t1=t2;
			t2=getToken(i);
		}
		return false;
	}
}

PARSER_END(CParser_GCC)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"

|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
|  <"asm" (" "|"\t") ("\t"|"\n"|"\r"|" "|"\r\n")* "{" (~["{","}"])* "}">
|  <("__asm"|"__asm__") (" "|"\t") ("\t"|"\n"|"\r"|" "|"\r\n")* "{" (~["{","}"])* "}">
|  <"asm" (" "|"\t") (~["\n","\r","}","{","("])* ("\n" | "\r" | "\r\n")?>
|  <("__asm"|"__asm__") (" "|"\t") (~["\n","\r","}","{","("])* ("\n" | "\r" | "\r\n")?>
|  <("__asm"|"asm"|"__asm__") (" "|"\t"|"\r"|"\n")* (~["\n","\r","}","{","("])* "("> {
	int leftbracketnum=1;//左括号的个数
	char c;
	try{
		while(leftbracketnum>0&&(c=input_stream.readChar())>0){
			if (c==')') leftbracketnum--;
			if (c=='(') leftbracketnum++;
		}
		//xqing
		/*while((c=input_stream.readChar())>0){
			if (c==';'){
				break;
			}
			System.out.println("should be a <;> after __asm( <something> )");
		}*/
	}catch(Exception e){e.printStackTrace();}
   }
//GCC
//From defines.txt
| "__based(x)" | "_based(x)" 
| "__cdecl"| "_cdecl" 
| "__fastcall"| "_fastcall" 
| "__stdcall"| "_stdcall" 
| "__declspec(x)"| "_declspec(x)" 
| "__assume(x)"| "_assume(x)" 
| "__multiple_inheritance"| "_multiple_inheritance" 
| "__single_inheritance"| "_single_inheritance"
| "__virtual_inheritance"| "_virtual_inheritance"
| "__leave" | "_leave" 
| "__inline"| "_inline"| "__inline__"| "inline" 
| "__forceinline"| "_forceinline"
| "__ptr64"
| "__DJ_wint_t" 
//| "__volatile__"  
| "__attribute__(x)"
| "__asm__(x)"
| "__extension__"
| "NONAMELESSUNION"
| "NONAMELESSSTRUCT" 
| "__MINGW_ATTRIB_NORETURN"
| "__MINGW_ATTRIB_CONST"
| "__MINGW_ATTRIB_MALLOC"
| "__MINGW_ATTRIB_PURE" 
| "__CRT_INLINE"
| "__MINGW_IMPORT"
| "__MINGW_NOTHROW"
| "PACKED"
//End
|  < ("__attribute__" | "__attribute") (" "|"\t"|"\n"|"\r")* "((" > {
	leftbracketnum=2;//左括号的个数
	try{
		while(leftbracketnum>0&&(c=input_stream.readChar())>0){
			if (c==')') leftbracketnum--;
			if (c=='(') leftbracketnum++;
		}
	}catch(Exception e){e.printStackTrace();}
    }
| "#" : PREPROCESSOR_OUTPUT
| "__restrict__"
| "__restrict"
| "restrict" //void f(int *restrict a[2], restrict ipa b, int *restrict c[restrict]); 
}

<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" 
     {
         if(image.length()>0){
         	String tempimage = image.toString();
			if (tempimage.startsWith("line") || tempimage.startsWith("Line")
					|| tempimage.startsWith(" ")) {
				String[] strs = tempimage.split(" ");
				boolean b = false;
				if (strs.length >= 2) {
					int newline = 0;
					String newfilename ="";
					if(strs.length>2){
 						newfilename= strs[2];
 						int i=3;
 						while(i<strs.length&&newfilename.startsWith("\"")&&!newfilename.endsWith("\"")){
 							newfilename= newfilename+" "+strs[i];
 							i++;
 						}
					}
					try {
						newline = Integer.parseInt(strs[1])-1;
						newfilename=newfilename.replace("/", "\\");
						newfilename=newfilename.replace("\\\\","\\");
						newfilename.intern();
						b = true;
					} catch (Exception e) {
					}
					if (b && (input_stream instanceof CCharStream)) {
						((CCharStream) input_stream)
								.adjustBeginLineAndFileName(newline,
										newfilename);
					}
				}
			}
         }
   }: DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
 "\\\n"
 |
 "\\\r\n"
 |
 < ~[] >
}

//added by zys:gcc complex nums
TOKEN : {
// modify to support vc style integer 	
	<COMPLEX_LITERAL: <INTEGER_LITERAL> ( ["i","I"] | ["j","J"] ) | <FLOATING_POINT_LITERAL> ( ["i","I"] | ["f","F"] | ["j","J"])* >
| <INTEGER_LITERAL: <DECIMAL_LITERAL> (((["u","U"])(["l","L"])?)?|((["l","L"])(["u","U"])?)?|("i64"|"LL"|"ll"|"ULL"|"ull"|"uLL"|"Ull"|"llu"|"LLU")?)
| <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?|<DECIMAL_LITERAL_UL>|<HEX_LITERAL_LLU>>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* | "0">//GCC: int i=~0ul;
|  <#DECIMAL_LITERAL_UL: ("0"(["1"-"9"])(["0"-"9"])* | "0")"UL">

|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+(((["u","U"])(["l","L"])?)?|((["l","L"])(["u","U"])?))>
|  <#HEX_LITERAL_LLU: "0"(["x","X"])?(["0"-"9","a"-"f","A"-"F"])*"LLU">
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: <HEX_FLOATING_POINT_LITERAL> | (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D","w","W","q","Q","l","L"])* | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D","w","W","q","Q","l","L"])* | (["0"-"9"])+ <EXPONENT> (["f","F","d","D","w","W","q","Q","l","L"])* | (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D","w","W","q","Q","l","L"])*>
|		<#HEX_FLOATING_POINT_LITERAL: ("0x"|"0X") ( (["a"-"f","A"-"F","0"-"9"])+ "." (["a"-"f","A"-"F","0"-"9"])* <EXPONENT> (["f","F","d","D","w","W","q","Q","l","L"])* | "." (["a"-"f","A"-"F","0"-"9"])+ (<EXPONENT>) (["f","F","d","D","w","W","q","Q","l","L"])* | (["a"-"f","A"-"F","0"-"9"])+ <EXPONENT> (["f","F","d","D","w","W","q","Q","l","L"])* ) >
|  		<#EXPONENT: ["e","E","p","P"] (["+","-"])? (["0"-"9"])+>
|  <CHARACTER_LITERAL: ("L")? "\'" ((~["\'","\\","\n","\r"])* | "\\" (["0","e","a","v","n","t","b","r","f","?","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]) |"\\x"(["0"-"9","a"-"f","A"-"F"])* ) "\'">
|  <STRING_LITERAL: ("L")?  "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["0","a","e","v","x","n","t","b","r","f","?","\\","\'","\"","%"," "] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
//added by qfx,GCC
|  <BINARY_LITERAL:"0b"(["0","1"])+>
}

TOKEN : {
	<BOOL: "_Bool"> |
	<THREAD: "__thread"> |
	<FUNC: "__func__" | <FUNC1> | <FUNC2> > |
		<#FUNC1: "__FUNCTION__"> |
		<#FUNC2: "__PRETTY_FUNCTION__"> |
	<ALIGNOF: "__alignof__" | "__alignof"> |
	<COMPLEX: "_Complex" | <OLDCOMPLEX> > |
		<#OLDCOMPLEX: "__complex__"> |
	<REAL: "__real__" | "__real"> |
	<IMAG: "__imag__" | "__imag"> |
	<TYPEOF: "typeof" | "__typeof" |<OLDTYPEOF> > |
		<#OLDTYPEOF: "__typeof__"> |
	<LABEL: "__label__"> |
	<CONTINUE: "continue"> |
	<VOLATILE: "volatile" | "__volatile" | "__volatile__"> |
	<REGISTER: "register"> |
	<UNSIGNED: "unsigned"> |
	<TYPEDEF: "typedef"> |
	<DFLT: "default"> |
	<DOUBLE: "double"> |
	<SIZEOF: "sizeof"> |
	<SWITCH: "switch"> |
	<RETURN: "return"> |
	<EXTERN: "extern"> |
	<STRUCT: "struct"> |
	<STATIC: "static"> |
	<SIGNED: "signed"|"__signed__"|"__signed"> |
	<WHILE: "while"> |
	<BREAK: "break"> |
	<UNION: "union"> |
	<CONST: "const" | "__const"> |
	//added by qfx 2013-5-8：float16、float32、float64、__float16、__float32、__float64
	<FLOAT: ("float"|"float16"|"float32"|"float64"|"__float16"|"__float32"|"__float64"|  <FLOAT80> | <FLOAT128>) >|
		<#FLOAT80: "__float80"> |
		<#FLOAT128: "__float128"> |
	<DECIMALFLOAT: "_Decimal32" | <DECIMALFLOAT64> | <DECIMALFLOAT128> > |
			<#DECIMALFLOAT64: "_Decimal64"> |
			<#DECIMALFLOAT128: "_Decimal128"> |
	<SHORT: "short"> |
	<ELSE: "else"> |
	<CASE: "case"> |
	<LONG: "long"> |
	<ENUM: "enum"> |
	<AUTO: "auto"> |
	<VOID: "void"> |
	<CHAR: "char"> |
	<GOTO: "goto"> |
	<FOR: "for"> |
	//added by qfx:int16_t、int_least16_t、int_fast32_t、intmax_t、uintmax_t、uint8_t、uint16_t、uint32_t、uint64_t、int8、int16、int32、int64、size_t
	<INT: "int"|"__int8"|"__int16"|"__int32"|"__int64"|"int8"|"int16"|"int32"|"int64"|"int16_t"|"int_least16_t"|"int_fast32_t"|"intmax_t"|"uintmax_t"|"uint8_t"|"uint16_t"|"uint32_t"|"uint64_t"|"size_t"> |
	<IF: "if"> |
	<DO: "do"> |
	<SEMICOLON: ";"> |
	<LEFTCURLYBRACKETS: "{"> |
	<RIGHTCURLYBRACKETS: "}"> |
	<LEFTBRACKET: "["> |
	<RIGHTBRACKET: "]"> |
	<COMMA:",">|
	<EQUAL: "=" >|
	<FAR:"far"|"__far"|"xdata"|"__xdata">|
	<NEAR:"near"|"__near">
}

TOKEN : {
 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
}

ASTTranslationUnit TranslationUnit() : {}
{
	(ExternalDeclaration())*
	{ return jjtThis;}
}

void ExternalDeclaration() : {}
{
	try{
	LOOKAHEAD( [DeclarationSpecifiers()] Declarator() [ DeclarationList() ] "{" ) FunctionDefinition() 
	| LOOKAHEAD( FunctionDeclaration(),{getToken(1).kind!=CParser_GCCConstants.TYPEDEF &&!isPointer()} ) 
	  FunctionDeclaration()
	| Declaration()
	}catch(ParseException e){
		error_skipto(SEMICOLON,e);
	}
}

//gcc:
void FunctionDeclaration(): {Token t;boolean flag=false;}
{
	[LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers()] 
	[ Pointer() ] 
	( t = <IDENTIFIER>{ jjtThis.setImage(t.image);}
	|LOOKAHEAD("(" Declarator()")",{getToken(4).image=="("}) "(" Declarator(){flag=true;jjtThis.setOperatorTypeAndFlag("",flag);flag=false;} ")" 
	)
	( 
		LOOKAHEAD(3) "(" ParameterTypeList(){flag=true;} ")"{jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;}  |
		"(" [ IdentifierList(){flag=true;} ] ")" {jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;} 
	)+
		 	    	 
	[ DeclarationList() ]
	<SEMICOLON>
}


void FunctionDefinition() : {}
{
	[LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers()] Declarator() [ DeclarationList() ]
	CompoundStatement()
}

////zys
void Declaration() : {}
{
	try{
	 DeclarationSpecifiers() [ InitDeclaratorList() ] <SEMICOLON> 
	}catch(ParseException e){
		error_skipto(SEMICOLON,e);
	}finally{
		if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){
		   	popTypedefParsingStack("Encounter InitDeclaratorList end");
		}
	}
}

//GCC 5.4 add nested functions
void DeclarationList() : {}
{
	( LOOKAHEAD(NestedFunctionDeclaration()) NestedFunctionDeclaration() |
	Declaration())+
}

void NestedFunctionDeclaration() : {Token t;boolean flag=false;}
{
	<AUTO>
	[LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers()] 
	[ Pointer() ] ( t=<IDENTIFIER>{jjtThis.setImage(t.image);} | "(" Declarator() {flag=true;jjtThis.setOperatorTypeAndFlag("",flag);flag=false;}")" )
	(
	 	LOOKAHEAD(3) "(" ParameterTypeList() {flag=true;} ")"{jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;}  |
		"(" [ IdentifierList() {flag=true;} ] ")" {jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;} 
	)+
	<SEMICOLON>
}
void NestedFunctionDefinition() : {}
{
	DeclarationSpecifiers() Declarator() [ DeclarationList() ] CompoundStatement()
}

//GCC: add local label
void LabelDeclarationList() : {}
{
	( LOOKAHEAD(LabelDeclaration()) LabelDeclaration() )+
}
void LabelDeclaration() : {}
{
	LabelType() LabelDeclaratorList() <SEMICOLON>
}
void LabelDeclaratorList() : {}
{
	LabelDeclarator() (<COMMA> LabelDeclarator())*
}
void LabelDeclarator() : {Token t;}
{
	t=<IDENTIFIER>{jjtThis.setImage(t.image);} 
}
void LabelType() : {Token t;}
{
	t=<LABEL>{jjtThis.setImage(t.image);} 
}

//gcc
void DeclarationSpecifiers() : {}
{
	(
	  StorageClassSpecifier() 
	  [ LOOKAHEAD(DeclarationSpecifiers())
	        DeclarationSpecifiers()] |
	  TypeSpecifier()  [ LOOKAHEAD(DeclarationSpecifiers())
	        DeclarationSpecifiers() ] |
	  TypeQualifier() [ LOOKAHEAD(DeclarationSpecifiers())
	        DeclarationSpecifiers() ] 
	)
}

//GCC
void TypeofDeclarationSpecifier() :{}
{
	<TYPEOF> 
	"(" 
		( LOOKAHEAD(3) TypeName() 
		 | LOOKAHEAD(AssignmentExpression()) AssignmentExpression() 
		)
	")" 
}

void StorageClassSpecifier() : {Token t;}
{
	( t=<AUTO> {jjtThis.setImage(t.image);} 
	| t=<REGISTER> {jjtThis.setImage(t.image);} 
	| t=<STATIC> {jjtThis.setImage(t.image);} 
	| t=<EXTERN> {jjtThis.setImage(t.image);} 
	| t=<TYPEDEF>
	{
		jjtThis.setImage(t.image); 
		pushTypedefParsingStack(Boolean.TRUE,"Encounter a StorageClassSpecifier");
	} )
}

//gcc
void TypeSpecifier() : {}
{
	(
	  <BOOL> {jjtThis.setImage("_Bool");} 
	| <VOID> {jjtThis.setImage("void");}
	| <CHAR> {jjtThis.setImage("char");}
	| <SHORT> {jjtThis.setImage("short");}
	| <INT> {jjtThis.setImage("int");}
	| <LONG> {jjtThis.setImage("long");}
	| <FLOAT> {jjtThis.setImage("float");}
	| <DECIMALFLOAT> {jjtThis.setImage("decimalfloat");}
	| <DOUBLE> {jjtThis.setImage("double");}
	| <SIGNED> {jjtThis.setImage("signed");}
	| <UNSIGNED> {jjtThis.setImage("unsigned");}
	| StructOrUnionSpecifier() 
	| EnumSpecifier() 
	| LOOKAHEAD( {isType(getToken(1).image) && getToken(2).kind!=CParser_GCCConstants.SEMICOLON							
	  										&& getToken(2).kind!=CParser_GCCConstants.EQUAL } ) TypedefName() 
	| TypeofDeclarationSpecifier()  
	)
}

void TypeQualifier() : {Token t;}
{
	( t=<CONST> {jjtThis.setImage(t.image);} 
	| t=<VOLATILE> {jjtThis.setImage(t.image);} 
	| t=<STATIC> {jjtThis.setImage(t.image);} //added by qfx 2013-3-22
	| t=<FAR> {jjtThis.setImage(t.image);} 
	| t=<NEAR> {jjtThis.setImage(t.image);} 
	| t=<COMPLEX> {jjtThis.setImage(t.image);} 
	| t=<THREAD> {jjtThis.setImage(t.image);} 
	)
}

//GCC:
void StructOrUnionSpecifier() : {Token t = null;}
{
	{
		pushTypedefParsingStack(Boolean.FALSE,"Enter Union&Struct");
	}
	try{
		StructOrUnion() ( LOOKAHEAD(3) [ t=<IDENTIFIER>{jjtThis.setImage(t.image);} ] 
		<LEFTCURLYBRACKETS> 
		{
			structStack.push(Boolean.TRUE);
		}
		try {
			StructDeclarationList() 
		} catch (Exception ex) {
			DeclarationException(ex);
		} finally {
			structStack.pop();
		}
		<RIGHTCURLYBRACKETS> | t=<IDENTIFIER>{jjtThis.setImage(t.image);} )
	}catch(ParseException e){
		error_skipto(SEMICOLON,e);
	}finally{
		popTypedefParsingStack("Enter Union&Struct");
	}
}

void StructOrUnion() : {Token t;}
{
	( t=<STRUCT>{jjtThis.setImage(t.image);} | t=<UNION>{jjtThis.setImage(t.image);} )
}

//added by zys :gcc:empty struct such as struct s{};
void StructDeclarationList() : {}
{
	(StructDeclaration())*
}

void InitDeclaratorList() : {}
{
	try{
	InitDeclarator() (<COMMA> InitDeclarator())*
	}catch(ParseException e){
		error_skipto(SEMICOLON,e);
	}finally{
		
	}
}

void InitDeclarator() : {}
{
	Declarator() [ "=" Initializer() ]
}

void StructDeclaration() : {}
{
	try{
	[ SpecifierQualifierList() 
	[StructDeclaratorList()] ]
	<SEMICOLON>
	}catch(ParseException e){
		error_skipto(SEMICOLON,e);
	}
}

void SpecifierQualifierList() : {}
{
	  TypeSpecifier() [ LOOKAHEAD(SpecifierQualifierList())
	        SpecifierQualifierList() ]|
	  TypeQualifier() [ LOOKAHEAD(SpecifierQualifierList())
	        SpecifierQualifierList() ]
}

void StructDeclaratorList() : {}
{
	StructDeclarator() ( <COMMA> StructDeclarator() )*
}

void StructDeclarator() : {}
{
	LOOKAHEAD([Declarator()] ":")
	[ Declarator() ] ":" ConstantExpression() 
	|Declarator()
}

//GCC
void EnumSpecifier() : {Token t = null;}
{
	<ENUM> ( LOOKAHEAD(3) [ t=<IDENTIFIER>{jjtThis.setImage(t.image);}  ] <LEFTCURLYBRACKETS> EnumeratorList() [<COMMA>] <RIGHTCURLYBRACKETS> | t=<IDENTIFIER>{jjtThis.setImage(t.image);} )
}

//gcc : 	enum weekday{}; 
void EnumeratorList() : {}
{
	[Enumerator()] (LOOKAHEAD(2)  <COMMA> Enumerator())*
}

void Enumerator() : {Token t = null;}
{
	t=<IDENTIFIER>{jjtThis.setImage(t.image);} [ "=" ConstantExpression() ]	
}

//GCC: void* __attribute__ ((pure)) fun() __attribute__((hot));
void Declarator() : {}
{
	[ Pointer() ] 
	DirectDeclarator()
}

void DirectDeclarator() : { Token t;boolean flag=false;}
{
	(

		( t = <IDENTIFIER>

		{ 
			jjtThis.setImage(t.image);
			if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){
				addType(t.image);
				jjtThis.setIstypedef(true);
	  		}
		}
		| "(" Declarator(){flag=true;jjtThis.setOperatorTypeAndFlag("",flag);flag=false;} ")" 
		)
		{ typedefParsingStack.push( Boolean.FALSE ); }
		//modified by qfx 2013-3-22:  static, const, volatile
		( "[" [TypeQualifier()][ ConstantExpression(){flag=true;} ] "]"{jjtThis.setOperatorTypeAndFlag("[",flag);flag=false;}  |
	    	  LOOKAHEAD(3) "(" ParameterTypeList(){flag=true;} ")"{jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;}  |
	    	  "(" [ IdentifierList(){flag=true;} ] ")" {jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;} 
	    	)*
	 	{ typedefParsingStack.pop(); }   
	)
}


void Pointer() : {}
{
	"*" [ TypeQualifierList() ] [ Pointer() ]
}

void TypeQualifierList() : {}
{
	(TypeQualifier())+
}

void ParameterTypeList() : {}
{
	{ 
		pushTypedefParsingStack(Boolean.FALSE,"Enter ParameterTypeList");
	}
	try{
	ParameterList() [<COMMA> "..." {jjtThis.setVararg(true);}]
	}catch(Exception e){
		DeclarationException(e);
	}finally{
		popTypedefParsingStack("Exit ParameterTypeList");
	}
}

void ParameterList() : {}
{
	ParameterDeclaration() (LOOKAHEAD(2) <COMMA> ParameterDeclaration())*
}

void ParameterDeclaration() : {}
{
	DeclarationSpecifiers() ( LOOKAHEAD(Declarator()) Declarator() | [ AbstractDeclarator() ] )
}

void IdentifierList() : {Token t;}
{
	t=<IDENTIFIER>{jjtThis.addIndentifier(t.image);} (<COMMA> t=<IDENTIFIER>{jjtThis.addIndentifier(t.image);})*
}

//GCC:int a[][2][4] = { [2 ... 4][0 ... 1][2 ... 3] = 1, [2] = 2, [2][0][2] = 3 };
//struct A a = (struct A) { .j = 6, .k[2] = 12 };
//struct M n[] = { [0 ... 5].O[1 ... 2].K[0 ... 1] = 4, 5, 6, 7 };
//struct M o[] = { [0 ... 5].O = { [1 ... 2].K[0 ... 1] = 4 },[5].O[2].K[2] = 5, 6, 7 };
void Initializer() : {}
{
	( 
	LOOKAHEAD("[" ConstantExpression() "]") ("[" ConstantExpression() "]")+ ["." <IDENTIFIER>]  /*("[" ConstantExpression() "]")**/ ["="] ConstantExpression() |
	LOOKAHEAD("[" ConstantExpression() "...") ("[" ConstantExpression() "..." ConstantExpression() "]")+ ["="] ConstantExpression() |
	LOOKAHEAD("." PostfixExpression() "=" ) "." PostfixExpression() "=" AssignmentExpression() |
	LOOKAHEAD(<IDENTIFIER> ":") <IDENTIFIER> ":" AssignmentExpression() |
	  LOOKAHEAD(AssignmentExpression()) AssignmentExpression() |
	  <LEFTCURLYBRACKETS> InitializerList() [<COMMA>] <RIGHTCURLYBRACKETS> )
}

void InitializerList() : {}
{
	[Initializer()] (LOOKAHEAD(2) <COMMA> Initializer())*(LOOKAHEAD(2)<COMMA>)?
}

void TypeName() : {}
{
	SpecifierQualifierList() ([ AbstractDeclarator() ])

}

void AbstractDeclarator() : {}
{
	LOOKAHEAD( DirectAbstractDeclarator()Pointer())DirectAbstractDeclarator()Pointer()|
	LOOKAHEAD([Pointer()] DirectAbstractDeclarator())
	[Pointer()] DirectAbstractDeclarator() |
	Pointer() 
	
	 
}

void DirectAbstractDeclarator() : {boolean flag=false;}
{
	( LOOKAHEAD(2) "(" AbstractDeclarator(){flag=true;} ")"{jjtThis.setOperatorTypeAndFlag("",flag);flag=false;} |
	               "[" [ConstantExpression(){flag=true;}] "]"{jjtThis.setOperatorTypeAndFlag("[",flag);flag=false;} |
	               "(" [ParameterTypeList(){flag=true;}] ")"{jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;} 
	)

	( "[" [ ConstantExpression() {flag=true;}] "]"{jjtThis.setOperatorTypeAndFlag("[",flag);flag=false;} | 
	  "(" [ ParameterTypeList() {flag=true;}] ")"{jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;} 
	)*
}


void TypedefName() : {Token t;}
{
	t=<IDENTIFIER>{jjtThis.setImage(t.image);}
}

//added by zys:gcc 5.26-Mixed Declarations and Codes
//to make Statement() can include Declaration()?
void Statement() : {}
{
	try{
	( 
	  LOOKAHEAD(DeclarationSpecifiers() Declarator() [ DeclarationList() ] "{" ) 
	  NestedFunctionDefinition() | 
	  LOOKAHEAD(NestedFunctionDeclaration()) NestedFunctionDeclaration() |
	  LOOKAHEAD(DeclarationSpecifiers() FunctionDeclaration()) FunctionDeclaration() | 
	  LOOKAHEAD(Declaration()) Declaration() |
	  LOOKAHEAD(2) LabeledStatement() |
	  LOOKAHEAD(ExpressionStatement()) ExpressionStatement() |
	  CompoundStatement() |
	  SelectionStatement() |
	  IterationStatement() |
	  JumpStatement() )
	}catch(ParseException e){
		error_skipto(SEMICOLON,e);
		/*( LOOKAHEAD(2) LabeledStatement() |
	  ExpressionStatement() |
	  CompoundStatement() |
	  SelectionStatement() |
	  IterationStatement() |
	  JumpStatement() )*/
	}
}

//GCC:	case 1 ... 9:
void LabeledStatement() : {Token t;}
{
	( /*LOOKAHEAD(2)*/ t=<IDENTIFIER>{jjtThis.setImage(t.image);} ":" Statement() |
	  LOOKAHEAD(<CASE> ConstantExpression() "...") t=<CASE>{jjtThis.setImage(t.image);} ConstantExpression() "..." ConstantExpression() ":" Statement() |
	  t=<CASE>{jjtThis.setImage(t.image);} ConstantExpression() ":" Statement() |
	  t=<DFLT>{jjtThis.setImage(t.image);} ":" Statement() )
}

void ExpressionStatement() : {}
{
	[ Expression() ] <SEMICOLON>
}

//GCC: 5.2- Locally Declared Labels
////added by zys:gcc 5.26-Mixed Declarations and Codes
void CompoundStatement() : {}
{
	<LEFTCURLYBRACKETS> 
	(	[ LOOKAHEAD(LabelDeclarationList()) LabelDeclarationList() ]
	    [ LOOKAHEAD(StatementList()) StatementList() ])
	<RIGHTCURLYBRACKETS>
}

void StatementList() : {}
{	
	try{
	(Statement())+
	}catch(ParseException e){
		error_skipto(SEMICOLON,e);
	}
}

//GCC
void SelectionStatement() : {Token t;}
{
	( t=<IF>{jjtThis.setImage(t.image);} "(" Expression() ")" Statement() [ LOOKAHEAD(2) <ELSE> Statement() ] |
	  t=<SWITCH>{jjtThis.setImage(t.image);} "(" Expression() ")" Statement() )
}

void IterationStatement() : {Token t;}
{
	( t=<WHILE>{jjtThis.setImage(t.image);} "(" Expression() ")" Statement() |
	  t=<DO>{jjtThis.setImage(t.image);} Statement() <WHILE> "(" Expression() ")" <SEMICOLON> |
	  t=<FOR>{jjtThis.setImage(t.image);} "("
	 ( Declaration() {jjtThis.forChild[0]=true;} | ( [Expression() {jjtThis.forChild[0]=true;} ] <SEMICOLON>)) 	 
	  [ Expression(){jjtThis.forChild[1]=true;} ] <SEMICOLON> [ Expression(){jjtThis.forChild[2]=true;} ] ")" Statement() )
}



////added by zys:gcc 5.3 Labels as Values
//// label a; a:....;void *ptr=&&a; goto *ptr;
void JumpStatement() : {Token t,l;}
{
	( LOOKAHEAD(<GOTO> <IDENTIFIER>) 
	t=<GOTO>{jjtThis.setImage(t.image);} l=<IDENTIFIER>{jjtThis.setLabel(l.image);} <SEMICOLON> |
	LOOKAHEAD(<GOTO> "*") 
	t=<GOTO>{jjtThis.setImage(t.image);} UnaryExpression() <SEMICOLON>|
	t=<CONTINUE>{jjtThis.setImage(t.image);} <SEMICOLON> |
	t=<BREAK>{jjtThis.setImage(t.image);} <SEMICOLON> |
	t=<RETURN>{jjtThis.setImage(t.image);} [ Expression() ] <SEMICOLON> )
}

void Expression() : {}
{
	AssignmentExpression() ( <COMMA> AssignmentExpression() )*
}

//gcc: (int)x=3
void AssignmentExpression() : {}
{
	  LOOKAHEAD(UnaryExpression() AssignmentOperator()) UnaryExpression() AssignmentOperator() AssignmentExpression() |
	  LOOKAHEAD(CastExpression() AssignmentOperator()) 
	  CastExpression() AssignmentOperator() AssignmentExpression()|
	  ConditionalExpression()
	 |	  LOOKAHEAD(StructOrUnionSpecifier()<COMMA>UnaryExpression())StructOrUnionSpecifier()<COMMA>UnaryExpression()
}

void AssignmentOperator() : {}
{
	( "="{jjtThis.setOperatorType("=");} | "*=" {jjtThis.setOperatorType("*=");} | "/=" {jjtThis.setOperatorType("/=");}  | "%=" {jjtThis.setOperatorType("%=");} 
	| "+="  {jjtThis.setOperatorType("+=");} | "-="  {jjtThis.setOperatorType("-=");} | "<<=" {jjtThis.setOperatorType("<<=");}  | ">>="  {jjtThis.setOperatorType(">>=");} 
	| "&="  {jjtThis.setOperatorType("&=");} | "^=" {jjtThis.setOperatorType("^=");}  | "|=" {jjtThis.setOperatorType("|=");}  )
}

////added by zys:GCC 5.7 Conditionals with Omitted Operands
////x?:y ==>x?x:y
void ConditionalExpression() #ConditionalExpression(>1): {}
{
	LogicalORExpression() [ "?" [Expression()] ":" ConditionalExpression() ]
}

void ConstantExpression() : {}
{
	ConditionalExpression()
}

void LogicalORExpression() #LogicalORExpression(>1): {}
{
	LogicalANDExpression() ( "||"  {jjtThis.setOperatorType("||");}LogicalANDExpression() )*
}

void LogicalANDExpression() #LogicalANDExpression(>1): {}
{
	InclusiveORExpression() ( "&&"{jjtThis.setOperatorType("&&");} InclusiveORExpression() )*
}

void InclusiveORExpression() #InclusiveORExpression(>1): {}
{
	ExclusiveORExpression() ( "|" {jjtThis.setOperatorType("|");} ExclusiveORExpression() )*
}

void ExclusiveORExpression() #ExclusiveORExpression(>1): {}
{
	ANDExpression() ( "^"  {jjtThis.setOperatorType("^");}ANDExpression() )*
}

void ANDExpression() #ANDExpression(>1): {}
{
	EqualityExpression() ( LOOKAHEAD(2) "&"{jjtThis.setOperatorType("&");} EqualityExpression() )*
}

void EqualityExpression() #EqualityExpression(>1): {}
{
	RelationalExpression() ( ( "==" {jjtThis.setOperatorType("==");}| "!=" {jjtThis.setOperatorType("!=");} ) RelationalExpression() )*
}

void RelationalExpression() #RelationalExpression(>1): {}
{
	ShiftExpression() ( LOOKAHEAD(2) ( "<" {jjtThis.setOperatorType("<");}  | ">" {jjtThis.setOperatorType(">");}  | "<="  {jjtThis.setOperatorType("<=");} | ">=" {jjtThis.setOperatorType(">=");}  )  ShiftExpression() )*
}

void ShiftExpression() #ShiftExpression(>1): {}
{
	AdditiveExpression() ( ( "<<" {jjtThis.setOperatorType("<<");}  | ">>"  {jjtThis.setOperatorType(">>");} )  AdditiveExpression() )*
}

void AdditiveExpression() #AdditiveExpression(>1): {}
{
	MultiplicativeExpression() (LOOKAHEAD(2) ( "+" {jjtThis.setOperatorType("+");}  | "-"  {jjtThis.setOperatorType("-");} ) MultiplicativeExpression())*
}

void MultiplicativeExpression() #MultiplicativeExpression(>1): {}
{
	CastExpression()  (LOOKAHEAD(2) ( "*"  {jjtThis.setOperatorType("*");} | "/" {jjtThis.setOperatorType("/");}  | "%" {jjtThis.setOperatorType("%");}  ) CastExpression())*
}

//gcc:	struct foo {int a; char b[2];} structure;
//		structure = ((struct foo) {x + y, ’a’, 0});
void CastExpression() #CastExpression(>1): {}
{
	( LOOKAHEAD("(" TypeName() ")" CastExpression() ) "(" TypeName() ")" CastExpression() |
	  UnaryExpression() 
	) 
}

//gcc: alignof
void UnaryExpression() : {Token t;}
{
	( 
	  LOOKAHEAD(3) PostfixExpression() |
	  "++"  {jjtThis.setOperatorType("++");} UnaryExpression() |
	  "--" {jjtThis.setOperatorType("--");}  UnaryExpression() |
	  UnaryOperator() CastExpression() |
	  t=<SIZEOF>{jjtThis.setImage(t.image);} ( LOOKAHEAD(UnaryExpression()) UnaryExpression() | "(" TypeName() ")" ) |
	  t=<ALIGNOF>{jjtThis.setImage(t.image);} ( LOOKAHEAD(UnaryExpression() ) UnaryExpression() | "(" TypeName() ")" ) 		 
	 | t=<IMAG>{jjtThis.setImage(t.image);} ( LOOKAHEAD(UnaryExpression() ) UnaryExpression() | "(" TypeName() ")" )
	 | t=<REAL>{jjtThis.setImage(t.image);} ( LOOKAHEAD(UnaryExpression() ) UnaryExpression() | "(" TypeName() ")" )
	 | LOOKAHEAD("{" InitializerList() "}") "{" InitializerList() "}"
	 )
}

////added by zys:gcc 5.3 Labels as Values
//// label a; a:....;void *ptr=&&a; goto *ptr;
void UnaryOperator() : {}
{
	( "&&" {jjtThis.setOperatorType("&&");} | "&" {jjtThis.setOperatorType("&");}  | "*" {jjtThis.setOperatorType("*");}  | "+" {jjtThis.setOperatorType("+");}  | "-" {jjtThis.setOperatorType("-");}  | "~" {jjtThis.setOperatorType("~");}  | "!"  {jjtThis.setOperatorType("!");} )
}

void FieldId():{Token t;}{
	t=<IDENTIFIER>{jjtThis.setImage(t.image);} 
}

//gcc:	typeof (*(A));
void PostfixExpression() : {boolean flag=false;}
{
	PrimaryExpression() ( "[" Expression() {jjtThis.setOperatorTypeAndFlag("[",true);}"]" |
	                      "(" [ LOOKAHEAD(ArgumentExpressionList() ) ArgumentExpressionList() {flag=true;}] {jjtThis.setOperatorTypeAndFlag("(",flag);flag=false;}")" |
	  					  "."  FieldId() {jjtThis.setOperatorTypeAndFlag(".",true);}|
	  					  "->" FieldId() {jjtThis.setOperatorTypeAndFlag("->",true);}|
	  					  "++"  {jjtThis.setOperatorTypeAndFlag("++",false);} |
	  					  "--"  {jjtThis.setOperatorTypeAndFlag("--",false);} )*
}

//GCC: add statement expression such as int i=({int j;j++;int k;j*k;});
void PrimaryExpression() : {Token t;}
{
	( t=<IDENTIFIER> {jjtThis.setImage(t.image);} 
	| Constant() 
	| LOOKAHEAD( "(" Expression() ) "(" Expression() ")"
	| LOOKAHEAD("(" CompoundStatement()) "(" CompoundStatement() ")"
	)
}

void ArgumentExpressionList() : {}
{
	AssignmentExpression() ( <COMMA> AssignmentExpression() )*
}

//gcc
void Constant() : {Token t;}
{
	(
		t=<INTEGER_LITERAL> 
	| t=<BINARY_LITERAL>  //added by qfx,GCC 
	|	t=<COMPLEX_LITERAL>
 	|	t=<FLOATING_POINT_LITERAL>
 	|	t=<CHARACTER_LITERAL>
 	|	(t=<STRING_LITERAL>)+
 	|	t=<FUNC>	//gcc : __func__
 	) {jjtThis.setImage(t.image);}
}
