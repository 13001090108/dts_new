/* Generated By:JavaCC: Do not edit this line. SymbolicParser.java */
package softtest.domain.c.symbolic.parser;
import softtest.domain.c.symbolic.DoubleFactor;
import softtest.domain.c.symbolic.Expression;
import softtest.domain.c.symbolic.Factor;
import softtest.domain.c.symbolic.FunctionFactor;
import softtest.domain.c.symbolic.IntegerFactor;
import softtest.domain.c.symbolic.NestedExprFactor;
import softtest.domain.c.symbolic.Power;
import softtest.domain.c.symbolic.SymbolFactor;
import softtest.domain.c.symbolic.Term;

import java.util.*;
import java.io.*;

public class SymbolicParser implements SymbolicParserConstants {
        static public Expression parse(String str){
                SymbolicParser parser = null;
                Expression ret = null;
                try {
                        parser = new SymbolicParser(new StringReader(str));
                        ret = parser.Expr();
                } catch (ParseException e) {
                        e.printStackTrace();
                }
                return ret;
        }

  final public Expression Expr() throws ParseException {
 Token t = null; Term term=null;Expression expr=null;
    switch (jj_nt.kind) {
    case 6:
    case 7:
      switch (jj_nt.kind) {
      case 6:
        t = jj_consume_token(6);
        break;
      case 7:
        t = jj_consume_token(7);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    term = Term();
                if(t!=null&&t.image.equals("-")){
                        term.setOperator("-");
                }
                expr=new Expression(term,false);
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case 6:
      case 7:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch (jj_nt.kind) {
      case 6:
        t = jj_consume_token(6);
        break;
      case 7:
        t = jj_consume_token(7);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term = Term();
                if(t.image.equals("-")){
                        term.setOperator("-");
                }
                expr.appendTerm(term);
    }
                {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
 Token t = null;Power power=null;Term term=null;
    switch (jj_nt.kind) {
    case 8:
    case 9:
      switch (jj_nt.kind) {
      case 8:
        t = jj_consume_token(8);
        break;
      case 9:
        t = jj_consume_token(9);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    power = Power();
                if(t!=null&&t.image.equals("/")){
                        power.setOperator("/");
                }
                term=new Term(power,false);
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case 8:
      case 9:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch (jj_nt.kind) {
      case 8:
        t = jj_consume_token(8);
        break;
      case 9:
        t = jj_consume_token(9);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      power = Power();
                if(t.image.equals("/")){
                        power.setOperator("/");
                }
                term.appendPower(power);
    }
                {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public Power Power() throws ParseException {
 Power power=null;Factor factor=null;
    switch (jj_nt.kind) {
    case 10:
      jj_consume_token(10);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    factor = Factor();
                power=new Power(factor,false);
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case 10:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(10);
      factor = Factor();
                power.appendFactor(factor);
    }
                {if (true) return power;}
    throw new Error("Missing return statement in function");
  }

  final public Factor Factor() throws ParseException {
 Factor factor=null;Expression expr=null;List<Expression> paramlist=null;String name=null;
    switch (jj_nt.kind) {
    case 11:
      jj_consume_token(11);
      expr = Expr();
      jj_consume_token(12);
                factor=new NestedExprFactor(expr);
                {if (true) return factor;}
      break;
    case ID:
      name = Identifier();
      switch (jj_nt.kind) {
      case 13:
        jj_consume_token(13);
        paramlist = ExprList();
        jj_consume_token(14);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                if(paramlist==null){
                        factor=new SymbolFactor(name);
                }else{
                        factor=new FunctionFactor(name,paramlist);
                }
                {if (true) return factor;}
      break;
    case NUM:
      name = Number();
                try{
                        long l=Long.parseLong(name);
                        {if (true) return new IntegerFactor(l);}
                }catch(NumberFormatException e1){
                        try{
                                double d=Double.parseDouble(name);
                                {if (true) return new DoubleFactor(d);}
                        }catch(NumberFormatException e2){
                                {if (true) throw new RuntimeException("Number format error");}
                        }
                }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
 Token t = null;
    t = jj_consume_token(ID);
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Number() throws ParseException {
 Token t = null;
    t = jj_consume_token(NUM);
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public List<Expression> ExprList() throws ParseException {
 List<Expression> list=null;Expression expr=null;
    switch (jj_nt.kind) {
    case ID:
    case NUM:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      expr = Expr();
                list=new ArrayList<Expression>();
                list.add(expr);
      label_4:
      while (true) {
        switch (jj_nt.kind) {
        case 15:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(15);
        expr = Expr();
                list.add(expr);
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
                {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SymbolicParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0,0xc0,0xc0,0xc0,0x300,0x300,0x300,0x300,0x400,0x400,0x2000,0x830,0x8000,0xff0,};
   }

  /** Constructor with InputStream. */
  public SymbolicParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SymbolicParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SymbolicParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SymbolicParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SymbolicParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SymbolicParser(SymbolicParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SymbolicParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
